<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何将本仓库集成到hexo</title>
      <link href="/2020/01/01/VimNote/hexo_integrate/"/>
      <url>/2020/01/01/VimNote/hexo_integrate/</url>
      
        <content type="html"><![CDATA[<h2 id="概述仓库的准备思考"><a href="#概述仓库的准备思考" class="headerlink" title="概述仓库的准备思考"></a>概述仓库的准备思考</h2><p>首先，需要三个仓库</p><ol><li>第一个是github.io，用来存放和发布hexo的public内容</li><li>第二个是hexo的配置仓库，这个仓库一旦经过配置，不会随意更改，并且需要用它来发布hexo的内容到github.io</li><li>第三个是VimNote仓库，这个仓库很灵活，可以随意的使用VIM书写markdown文档，不用关心任何网站的细节，什么时候需要更新网站时，用hexo推一下</li></ol><h2 id="快速集成和安装"><a href="#快速集成和安装" class="headerlink" title="快速集成和安装"></a>快速集成和安装</h2><p>仅仅需要两个步骤</p><ol><li><p>链接source文件到_posts/下<br> ln -s $path_for_note/VimNote $hexo_posts/VimNote</p></li><li><p>链接images目录到source/下<br> ln -s $path_for_note/VimNote/images $hexo_source/images</p></li></ol><h2 id="需要注意的点"><a href="#需要注意的点" class="headerlink" title="需要注意的点"></a>需要注意的点</h2><p>由于hexo需要使用yaml的类型，所以不要用类似<code>---</code>这样的分割线</p>]]></content>
      
      
      <categories>
          
          <category> howto </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建hexo并使用wixo主题</title>
      <link href="/2020/01/01/VimNote/hexo/hexo_required_for_wixo/"/>
      <url>/2020/01/01/VimNote/hexo/hexo_required_for_wixo/</url>
      
        <content type="html"><![CDATA[<h2 id="最简单最好用的Blog主题WIXO"><a href="#最简单最好用的Blog主题WIXO" class="headerlink" title="最简单最好用的Blog主题WIXO"></a>最简单最好用的Blog主题WIXO</h2><p>这里记录搭建hexo wixo主题的过程</p><h3 id="首先安装hexo并初始化"><a href="#首先安装hexo并初始化" class="headerlink" title="首先安装hexo并初始化"></a>首先安装hexo并初始化</h3><p>安装hexo很容易，在<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">官网</a>可以很容易的找到答案</p><p>当前版本</p><pre><code>[rex@localhost hexo]$ hexo -Vhexo-cli: 2.0.0os: Linux 3.10.0-957.el7.x86_64 linux x64node: 11.10.0v8: 7.0.276.38-node.17uv: 1.26.0zlib: 1.2.11brotli: 1.0.7ares: 1.15.0modules: 67nghttp2: 1.34.0napi: 4llhttp: 1.1.1http_parser: 2.8.0openssl: 1.1.1acldr: 34.0icu: 63.1tz: 2018eunicode: 11.0</code></pre><p>初始化hexo项目步骤</p><pre><code>hexo init blogcd blognpm install</code></pre><h3 id="下载wixo主题并使能"><a href="#下载wixo主题并使能" class="headerlink" title="下载wixo主题并使能"></a>下载wixo主题并使能</h3><p>使用git，clone主题仓库</p><pre><code>git clone https://github.com/wzpan/hexo-theme-wixo.git themes/wixo</code></pre><p>安装依赖的库（对于本文所指当前版本来说）</p><pre><code>npm install hexo-generator-search --save # requirednpm install hexo-tag-bootstrap --save # optional 当前版本使用0.2.0不行，需要使用0.0.8版本才会正常npm install hexo-deployer-git --save # for deploy.. required</code></pre><p>部署时候的例子，当然需要修改配置文件_config.yml</p><pre><code>deploy:    type: git    repo: &lt;repository url&gt; # https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io    branch: [branch]    message: [message]</code></pre><p>最后，修改_config.yml,使能wixo主题</p><h3 id="快速尝鲜"><a href="#快速尝鲜" class="headerlink" title="快速尝鲜"></a>快速尝鲜</h3><p>仅仅堆叠指令，common on</p><pre><code>hexo cleanhexo g &amp;&amp; hexo s</code></pre>]]></content>
      
      
      <categories>
          
          <category> howto </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>文章样例模板</title>
      <link href="/2020/01/01/VimNote/demo/document_template/"/>
      <url>/2020/01/01/VimNote/demo/document_template/</url>
      
        <content type="html"><![CDATA[<p>本模板参考<strong>泰晓科技</strong>文档模板与约定，使用<strong>Hexo</strong>渲染引擎生成规范式文档。</p><p>具体格式内容，需要查看<strong>本文源码</strong>，由于该系列属于个人笔记，所以并没有安排自动生成模板格式草稿。</p><p>不过各文章的编辑基本参照该模板格式书写。</p><p>这里分别就几个方面展开介绍：</p><h2 id="文章分类"><a href="#文章分类" class="headerlink" title="文章分类"></a>文章分类</h2><p>文章目前记录随笔和系列撰稿，当前分类按照作者自己本人的意愿划分。</p><h2 id="内容列表"><a href="#内容列表" class="headerlink" title="内容列表"></a>内容列表</h2><ol><li><p>数字列表，条目 1</p><ul><li>普通列表，条目 1</li><li>普通列表，条目 2</li></ul></li><li><p>数字列表，条目 2</p></li></ol><h2 id="代码缩进"><a href="#代码缩进" class="headerlink" title="代码缩进"></a>代码缩进</h2><p>代码在正文下，用 4 个空格缩进：</p><pre><code>#include &lt;stdio.h&gt;int main(void){   printf(&apos;Hello, World!&apos;);}</code></pre><p><em>注</em>: 如果要跟列表一起缩进显示，得添加相应空格。</p><p>当然，如果你使用类似<strong>三个反引号</strong>的形式标注代码也没有限制，一般在<strong>emacs</strong>中可以得到很好的支持,类似这样:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">"so..."</span>, <span class="string">"\n"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>在 hexo 中建议使用<strong>三个反引号</strong>的形式，可以使用语法高亮，这是Hexo引擎使然。</p><h2 id="正文内内嵌代码"><a href="#正文内内嵌代码" class="headerlink" title="正文内内嵌代码"></a>正文内内嵌代码</h2><p>如果正文中包含了命令、接口、代码片段、变量等属于代码的部分时，请用 <code>括起来，例如：</code>grep Free /proc/meminfo`，用法为：</p><pre><code>`grep Free /proc/meminfo`</code></pre><h2 id="中英文以及数字混排"><a href="#中英文以及数字混排" class="headerlink" title="中英文以及数字混排"></a>中英文以及数字混排</h2><p>当中 English 文以及中文、数字混排时，记得在 English 和数字，例如 1 2 3 4 周边添加空格，进而确保可阅读性。</p><h2 id="表格用法"><a href="#表格用法" class="headerlink" title="表格用法"></a>表格用法</h2><table><thead><tr><th>标题 1</th><th align="right">标题 2</th><th align="center">标题 3</th></tr></thead><tbody><tr><td>左对齐</td><td align="right">右对齐</td><td align="center">居中对齐</td></tr></tbody></table><h2 id="在正文中嵌入图片"><a href="#在正文中嵌入图片" class="headerlink" title="在正文中嵌入图片"></a>在正文中嵌入图片</h2><p>Markdown 基本语法如下：</p><p><img src="https://getspet.com/wp-content/uploads/2018/04/Scottish-Fold-beautiful-cats.jpg" alt="图片名" title="图片内容提示，可选"></p><p><em>注</em>：如果想规范图片大小，想增加额外的特性，可以用 html 的 <code>&lt;img&gt;</code> 标记。</p><h3 id="Hexo-本地图片显示"><a href="#Hexo-本地图片显示" class="headerlink" title="Hexo 本地图片显示"></a>Hexo 本地图片显示</h3><p>在Hexo的Markdown使用的时候需要注意一些细节，这可能和标准的Markdown有所不同。</p><p><a href="https://www.xilixili.net/2019/03/26/hexo-markdown-use-images/" target="_blank" rel="noopener">Hexo本地图片显示问题解决方案</a></p><p>所以，一般用法是：</p><p><img src="/VimNote/images/cats.jpg" alt="我们家的偷情的俩货..."></p><h3 id="网络图片显示"><a href="#网络图片显示" class="headerlink" title="网络图片显示"></a>网络图片显示</h3><p>这没有什么特别的，按照Markdown的用法来:</p><p><img src="https://cn.bing.com/th?id=OIP.GTbdLeO3kutK1Uaw2lOiKgHaFu&pid=Api&rs=1" alt="别人家的猫叔"></p><h2 id="链接以及各类内容混排"><a href="#链接以及各类内容混排" class="headerlink" title="链接以及各类内容混排"></a>链接以及各类内容混排</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><ul><li><p><a href="http://tinylab.org" target="_blank" rel="noopener">链接用法一</a></p><p>在列表后面放入脚本，为了确保跟列表一起缩进，需要额外增加两个空格：</p><pre><code>#!/bin/bashecho &apos;Hello, World.&apos;</code></pre></li></ul><ul><li><p><a href="http://tinylab.org" target="_blank" rel="noopener">另外一种链接用法</a></p><p>在列表后面再嵌入子列表，包括数字列表和非数字列表：</p><ul><li>Another list<ul><li>Another list<ol><li>Third list</li><li>Third list</li></ol></li></ul></li></ul></li></ul><ul><li>第三种链接用法：<a href="http://tinylab.org" target="_blank" rel="noopener">http://tinylab.org</a></li></ul><h3 id="更复杂的列表用法"><a href="#更复杂的列表用法" class="headerlink" title="更复杂的列表用法"></a>更复杂的列表用法</h3><ol><li><p>表项 1</p><p> 这里再嵌入代码：</p><pre><code>#include &lt;stdio.h&gt;int main() { return 0; }</code></pre></li><li><p>表项 2</p><p> 这里嵌入图片：</p><p> <img src="https://halopets.com/sites/default/files/2017-07/hp_caticon_kitten_adobe_84509847_crop.jpg" alt="图片名" title="图片内容描述信息"></p></li><li><p>表项 3</p><p> 普通正文</p></li></ol><p><em>注</em>：数字列表跟普通列表有一个差别是，数字列表后面如果要加正文自动缩进，得增加 4 个空格，而普通列表只需要两个。估计是 Markdown 解释器的问题，请尽量遵循这个约定吧。</p><h2 id="正文引用"><a href="#正文引用" class="headerlink" title="正文引用"></a>正文引用</h2><p>如果要引用第三方的信息，可以这么做：</p><blockquote><p>这里是来自第三方的信息，信息内容可以用普通的 Markdown 语法来标记<a href="http://tinylab.org" target="_blank" rel="noopener">链接</a>、<strong>加粗</strong>、<em>斜体</em>、<code>命令</code>等等。</p></blockquote><h2 id="Markdown-入门资料"><a href="#Markdown-入门资料" class="headerlink" title="Markdown 入门资料"></a>Markdown 入门资料</h2><p><a href="https://blog.csdn.net/zhuzhuyule/article/details/58347687" target="_blank" rel="noopener">简单如何，动手实践下</a></p><p><a href="https://sspai.com/post/37273" target="_blank" rel="noopener">Markdown 的一些罕见用法</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/linux-tools/xargs</title>
      <link href="/2020/01/01/VimNote/linux-tools/xargs/"/>
      <url>/2020/01/01/VimNote/linux-tools/xargs/</url>
      
        <content type="html"><![CDATA[<h1 id="xargs使用"><a href="#xargs使用" class="headerlink" title="xargs使用"></a>xargs使用</h1><p>这个指令一般叫做管道命令，构造参数等.</p><p>它是给命令传递参数的一个过滤器，也是组合多个命令的一个中间工具.</p><p>它把数据流分割为一些足够小的部分，以方便过滤器或命令进行处理 。</p><p>简单来讲，就是把标准数据流按照特定的分隔符，分割成不同的数据快（或者叫作参数）传递给xargs指定的命令，作为其参数。</p><h2 id="使用帮助"><a href="#使用帮助" class="headerlink" title="使用帮助"></a>使用帮助</h2><pre><code>man xargs # or info xargs</code></pre><p>你也可这里找到一些<a href="https://docs.oracle.com/cd/E56344_01/html/E54075/xargs-1.html" target="_blank" rel="noopener">中文版本的翻译</a>.</p><h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><blockquote><p>-d 指定分隔符，注意这里指传入xargs命令的数据分割符，不是xargs传递给后续拼接命令的分隔符，并且如果使用-d\n会保留分隔符’\n’</p></blockquote><blockquote><p>-i 用’{}’代替从标准输入传递过来的内容</p></blockquote><blockquote><p>-I STRING 使用STRING代替从标准输入传递过来的数据</p></blockquote><blockquote><p>-n 限定后续拼接命令行每次接收参数的上限</p></blockquote><blockquote><p>-t 显示执行的命令，便于调试</p></blockquote><blockquote><p>-p 交互式的确认每次的动作</p></blockquote><blockquote><p>-P n 允许最大的线程数目</p></blockquote><blockquote><p>-r 忽略空参数的传递，阻止一次空参数指令的执行</p></blockquote><blockquote><p>-0 这里是数字0，一般配合find命令中的-print0使用.<br>输入项以空字符而非空格或 NEWLINE 结束，引号和反斜杠不会特殊对待，即每个字符都按字面意思理解 。<br>还会禁用文件结束字符串，并将其与其他任何参数一样对待。<br>该选项在输入项可能包含空格、引号或反斜杠时非常有用。查找 –print0 选项可以生成适合该模式的输入。</p></blockquote><h2 id="xargs默认的一些规则"><a href="#xargs默认的一些规则" class="headerlink" title="xargs默认的一些规则"></a>xargs默认的一些规则</h2><p>xargs默认不会将’\n’保留，而是会忽略掉，可以使用-d\n来保留’\n’字符。</p><p>xargs在读取标准输入的时候，会自动忽略空白行，多须的空白和tab这种空白字符。</p><p>xargs后不拼接任何命令的时候，默认调用/bin/echo指令。</p><p>在终端下，如果使用类似cat或者xargs的指令后，会将所有的终端输入变为标准输入，使用<C-d>表示标准输入结束.</p><p>NOTE: 还是再次强调下-d选项</p><p>需要区分两个分隔符：</p><ol><li><p>xargs 从管道中过滤数据流的分隔符，这个可以自己指定，默认是‘空白字符’，如空白，换行，tab等，<br>不过如果指定-d\n的话，就会以’\n’来分割，并且会保留’\n’</p></li><li><p>xargs 传递给后续拼接指令的分隔符，这是默认的，就是空格！</p></li></ol><h2 id="xargs-使用案例"><a href="#xargs-使用案例" class="headerlink" title="xargs 使用案例"></a>xargs 使用案例</h2><h3 id="忽略空参数"><a href="#忽略空参数" class="headerlink" title="忽略空参数"></a>忽略空参数</h3><p>什么是空参数，类似这样</p><pre><code>echo a b c d e f | xargs -p -n 3</code></pre><p>添加了-p选项，那么输出是交互的，同样的在交互的时候会允许你选择y或者n，假设你都选n，那么xargs默认使用的/bin/echo程序就没有参数传递，这就是一个空参数的例子。</p><p>那应该如何避免空参数执行呢？就使用前文提到的-r选项。</p><pre><code>echo a b c d e f | xargs -p -n 3 -r</code></pre><h3 id="操作包含空白字符名称的文件"><a href="#操作包含空白字符名称的文件" class="headerlink" title="操作包含空白字符名称的文件"></a>操作包含空白字符名称的文件</h3><p>xargs会默认忽略输入的空白符号，那么像下面这样调用指令是不正确的：</p><pre><code>#文件名称为 &apos;Good File Nice.log&apos; --&gt; xargs 将前面这个内容解析为 xargs Good File Nice.log，这并不是我们想要的find . -type f -name &quot;*.log&quot; | xargs rm -f</code></pre><p>而正确的做法是：</p><pre><code>find . -type f -name &quot;*.log&quot; -print0 | xargs -0 rm -f</code></pre><h3 id="什么时候省略-i-I这样的选项"><a href="#什么时候省略-i-I这样的选项" class="headerlink" title="什么时候省略-i/-I这样的选项"></a>什么时候省略-i/-I这样的选项</h3><ol><li><p>xargs的后续拼接命令需要传入的参数并不是在最后面的时候</p><p> ls *.log | xargs -i {} cp {} /data/tmp</p></li><li><p>一般如果后续的命令有重复使用xargs传入的参数，那么就使用-i/-I选项，毕竟他们也是为了重复利用而设计的。</p><p>ls *.log | xargs -i {} cp {} {}.bak</p></li></ol><h3 id="合并多个命令的输出到一行"><a href="#合并多个命令的输出到一行" class="headerlink" title="合并多个命令的输出到一行"></a>合并多个命令的输出到一行</h3><p>以下命令会将用圆括号括起来的命令的输出合并到一行，随后将其写入文件结束 log</p><pre><code>example% (logname; date; printf &quot;%s\n&quot; &quot;$0 $*&quot;) | xargs &gt;&gt;log</code></pre><h3 id="使用xargs归档文件"><a href="#使用xargs归档文件" class="headerlink" title="使用xargs归档文件"></a>使用xargs归档文件</h3><p>询问用户要归档当前目录中的哪些文件。文件将归档到 arch ; 可以一次归档一个文件，也可以一次归档多个文件：</p><pre><code>ls | xargs -p -L 1 ar -r archls | xargs -p -L 1 | xargs ar -r arch</code></pre><h3 id="使用xargs给一些比较工具传递成对参数"><a href="#使用xargs给一些比较工具传递成对参数" class="headerlink" title="使用xargs给一些比较工具传递成对参数"></a>使用xargs给一些比较工具传递成对参数</h3><p>命令将以最初键入为命令行参数的后续成对参数执行，一般给对比工具来使用</p><pre><code>echo $* | xargs -n 2 diff</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/linux-tools/find</title>
      <link href="/2020/01/01/VimNote/linux-tools/find/"/>
      <url>/2020/01/01/VimNote/linux-tools/find/</url>
      
        <content type="html"><![CDATA[<h1 id="使用find命令"><a href="#使用find命令" class="headerlink" title="使用find命令"></a>使用find命令</h1><p>find命令是查找文件的好帮手，请不要光依靠grep来搜索大量文件，<br>当文件不多时，grep可以快速的满足要求，这个快速是相对的，也就是人可以接受的范围<br>而当文件很多的时候，请使用find,xargs,grep三兄弟完成高效的文件查找与字符过滤。</p><h2 id="帮助文档"><a href="#帮助文档" class="headerlink" title="帮助文档"></a>帮助文档</h2><pre><code>man find # info find</code></pre><h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><p><code>find</code>指令默认会递归查找指定目录及其子目录</p><h3 id="列出当前目录及子目录下的所有空文件或者空目录"><a href="#列出当前目录及子目录下的所有空文件或者空目录" class="headerlink" title="列出当前目录及子目录下的所有空文件或者空目录"></a>列出当前目录及子目录下的所有空文件或者空目录</h3><pre><code>find . -empty</code></pre><h3 id="搜索并排除指定的子目录"><a href="#搜索并排除指定的子目录" class="headerlink" title="搜索并排除指定的子目录"></a>搜索并排除指定的子目录</h3><pre><code>find . -path &apos;./sk&apos; -prune -o name &apos;*.txt&apos; -print</code></pre><p>查找除了子目录’sk’目录下的所有txt文件</p><pre><code>find . -path &apos;./.git&apos; -prune -o -path &apos;.vim&apos; -prune -o -name &apos;*.md&apos; -print</code></pre><p>排除选项-prune控制前面的-path指定的目录，排除多个目录使用-o选项隔开</p><h3 id="使用find指令执行外部脚本"><a href="#使用find指令执行外部脚本" class="headerlink" title="使用find指令执行外部脚本"></a>使用find指令执行外部脚本</h3><pre><code>find . -exec ./outside.sh {} \;</code></pre><p>outside.sh可以自己定制，传入的参数{}是find找到的每个输出结果。</p><p>NOTE: -exec 只能接受一条指令</p><h3 id="动作之前加确认"><a href="#动作之前加确认" class="headerlink" title="动作之前加确认"></a>动作之前加确认</h3><pre><code>find $HOME/. -name &quot;*.txt&quot; -ok rm {} \;</code></pre><p>交互选项-ok就是一个不错的选择</p><h3 id="找到指定用户或者指定群组的所属文件"><a href="#找到指定用户或者指定群组的所属文件" class="headerlink" title="找到指定用户或者指定群组的所属文件"></a>找到指定用户或者指定群组的所属文件</h3><pre><code>find . -type f -user rexfind . -type f -group rex-group</code></pre><h3 id="查找文件大小超过500M的文件"><a href="#查找文件大小超过500M的文件" class="headerlink" title="查找文件大小超过500M的文件"></a>查找文件大小超过500M的文件</h3><pre><code>find . -size +500M -type f</code></pre><h3 id="查找中的排除操作"><a href="#查找中的排除操作" class="headerlink" title="查找中的排除操作"></a>查找中的排除操作</h3><pre><code>find . -type f ! -name &apos;*.txt&apos;</code></pre><p>注意叹号’!’，这之后的参数是排除的选项<br>这个选项也可以配合-o选项进行连续排除</p><pre><code>find . ! -name &quot;*.md&quot; -o ! -name &quot;*.png&quot;</code></pre><h3 id="为什么-c报错"><a href="#为什么-c报错" class="headerlink" title="为什么*.c报错"></a>为什么*.c报错</h3><p>其实，这不是一个bug，查看手册可知，*.c被shell解释为连续的文件名，然后传递给find指令，这不是它需要的，如</p><pre><code>find . -name *.c # --&gt; find . -name a.c b.c c.c d.c --&gt; error</code></pre><p>因此，正确的做法是，不用shell来扩展，而让find命令自行完成*字符解析。</p><pre><code>find . -name \*.cfind . -name &quot;*.c&quot;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/linux-tools/mount</title>
      <link href="/2020/01/01/VimNote/linux-tools/mount/"/>
      <url>/2020/01/01/VimNote/linux-tools/mount/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-mount-command"><a href="#Linux-mount-command" class="headerlink" title="Linux mount command"></a>Linux mount command</h1><p>这篇主要介绍linux中的mount指令的一些参考案例和常用方法。</p><h2 id="帮助文档"><a href="#帮助文档" class="headerlink" title="帮助文档"></a>帮助文档</h2><pre><code>man mount # info mount</code></pre><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="查看当前磁盘的挂载情况，并输出好看一些的格式"><a href="#查看当前磁盘的挂载情况，并输出好看一些的格式" class="headerlink" title="查看当前磁盘的挂载情况，并输出好看一些的格式"></a>查看当前磁盘的挂载情况，并输出好看一些的格式</h3><pre><code>mount | column -t</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/issue-fix/linux-no-disk-space</title>
      <link href="/2020/01/01/VimNote/issue-fix/linux-no-disk-space/"/>
      <url>/2020/01/01/VimNote/issue-fix/linux-no-disk-space/</url>
      
        <content type="html"><![CDATA[<h1 id="使用linux操作系统的时候，发现磁盘空间爆满，无法正常使用或者启动系统，怎么办？"><a href="#使用linux操作系统的时候，发现磁盘空间爆满，无法正常使用或者启动系统，怎么办？" class="headerlink" title="使用linux操作系统的时候，发现磁盘空间爆满，无法正常使用或者启动系统，怎么办？"></a>使用linux操作系统的时候，发现磁盘空间爆满，无法正常使用或者启动系统，怎么办？</h1><p>最近碰到一个问题，突然好好的工作电脑就没有办法正常运行了，会提示类似没有磁盘空间的警告。<br>这时候萌新一定会重新启动，不过这都是徒劳的，并且你很可能会看到系统卡在某个阶段，一直进不去系统。</p><p>一般这种问题请不要慌张，这很是linux系统磁盘空间不足导致的常见问题，解决步骤如下：</p><blockquote><ol start="0"><li>如果你重启后进不去系统，也没有熟悉的桌面系统，请使用linux的tty控制台吧，就像终端一样使用它就可以。</li></ol></blockquote><pre><code>&lt;Ctrl&gt; + &lt;ALT&gt; + F1/F2/.../F5 #随你挑选# 输入用户名和密码开始下面的步骤。</code></pre><blockquote><ol><li>查看本机挂载的哪个磁盘空间已满，一般因该都是系统盘，就是挂载’/‘的磁盘。</li></ol></blockquote><pre><code>df -lhmount</code></pre><blockquote><ol start="2"><li>根据查看到的已经爆满的系统盘，进行遍历搜索大文件</li></ol></blockquote><pre><code>find / -size +400M -exec ls -lh {}\; #一般不知道具体位置的时候，使用这样的搜索find /var -size +400M -exec ls -lh {}\; #经验来讲，一般只有系统日志信息会无怨无官的占用这么大的空间(/var/log)</code></pre><blockquote><ol start="3"><li>找到大文件后，自己斟酌是否应该删除，如果是log文件，那就果断干掉它，笔者就碰到了大文件log (/var/log/syslog.1)有350G大小。</li></ol></blockquote><blockquote><ol start="4"><li>同步磁盘后重新启动计算机即可(其实不用重新启动，只不过强迫症会逼着你做的)。</li></ol></blockquote><pre><code>sync &amp;&amp; reboot (sudoer)</code></pre><p>NOTE: 不过一般不建议直接删除掉log文件或者较大的文件，至少应该知道是什么原因引起的问题。</p><p>笔者蹦到的问题是dockerd不断喂log给syslogd，导致log文件过大。</p><p>可以使用tail -f /var/log/syslog 看到到底谁在不断的扩大log，找到元凶才是正道。</p><p>由于笔者使用snap和apt都安装过docker，出现了一些奇怪的问题，所以需要snap和apt都删除掉docker，然后下载干净的docker方可。</p><p>关于如何关闭并移除Docker的讨论：</p><p>StackOverflow的一些回答<br><a href="https://stackoverflow.com/questions/40192415/how-permanently-kill-dockerd" target="_blank" rel="noopener">https://stackoverflow.com/questions/40192415/how-permanently-kill-dockerd</a><br>AskUbuntu的回答<br><a href="https://askubuntu.com/questions/935569/how-to-completely-uninstall-docker" target="_blank" rel="noopener">https://askubuntu.com/questions/935569/how-to-completely-uninstall-docker</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/01/01/VimNote/demo/hello-world/"/>
      <url>/2020/01/01/VimNote/demo/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/linux-tools/term-color</title>
      <link href="/2019/12/28/VimNote/linux-tools/term-color/"/>
      <url>/2019/12/28/VimNote/linux-tools/term-color/</url>
      
        <content type="html"><![CDATA[<h2 id="ANSI-Color-Codes"><a href="#ANSI-Color-Codes" class="headerlink" title="ANSI Color Codes"></a>ANSI Color Codes</h2><p><a href="http://pueblo.sourceforge.net/doc/manual/ansi_color_codes.html" target="_blank" rel="noopener">这里</a>可以看到所有的颜色代码.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/linux-kernel/bluetooth/l2cap</title>
      <link href="/2019/12/28/VimNote/linux-kernel/bluetooth/l2cap/"/>
      <url>/2019/12/28/VimNote/linux-kernel/bluetooth/l2cap/</url>
      
        <content type="html"><![CDATA[<h1 id="L2CAP协议的内核实现"><a href="#L2CAP协议的内核实现" class="headerlink" title="L2CAP协议的内核实现"></a>L2CAP协议的内核实现</h1><p>Logical Link Control and Adaptation Protocol(L2CAP)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/fzf/fzf_install</title>
      <link href="/2019/12/28/VimNote/fzf/fzf_install/"/>
      <url>/2019/12/28/VimNote/fzf/fzf_install/</url>
      
        <content type="html"><![CDATA[<h2 id="如何安装FZF"><a href="#如何安装FZF" class="headerlink" title="如何安装FZF"></a>如何安装FZF</h2><p>如果你想要方便省事，可以这样来</p><pre><code>$ git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzfCloning into &apos;/home/rex/.fzf&apos;...remote: Enumerating objects: 95, done.remote: Counting objects: 100% (95/95), done.remote: Compressing objects: 100% (88/88), done.remote: Total 95 (delta 4), reused 22 (delta 2), pack-reused 0Unpacking objects: 100% (95/95), done.$ ./.fzf/installDownloading bin/fzf ...% Total    % Received % Xferd  Average Speed   Time    Time     Time  CurrentDload  Upload   Total   Spent    Left  Speed100   616    0   616    0     0    550      0 --:--:--  0:00:01 --:--:--   550100 1134k  100 1134k    0     0   277k      0  0:00:04  0:00:04 --:--:--  508k- Checking fzf executable ... 0.20.0Do you want to enable fuzzy auto-completion? ([y]/n) yDo you want to enable key bindings? ([y]/n) yGenerate /home/rex/.fzf.bash ... OKDo you want to update your shell configuration files? ([y]/n) yUpdate /home/rex/.bashrc:- [ -f ~/.fzf.bash ] &amp;&amp; source ~/.fzf.bash + AddedFinished. Restart your shell or reload config file.source ~/.bashrc  # bashUse uninstall script to remove fzf.For more information, see: https://github.com/junegunn/fzf</code></pre><p>当然有很多的方法可以安装，具体可以查看官方的安装<a href="https://github.com/junegunn/fzf" target="_blank" rel="noopener">章节</a>。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/linux-tools/opengrok</title>
      <link href="/2019/12/28/VimNote/linux-tools/opengrok/"/>
      <url>/2019/12/28/VimNote/linux-tools/opengrok/</url>
      
        <content type="html"><![CDATA[<h2 id="OpenGrok-安装和使用"><a href="#OpenGrok-安装和使用" class="headerlink" title="OpenGrok 安装和使用"></a>OpenGrok 安装和使用</h2><p><a href="https://zhuanlan.zhihu.com/p/32568717" target="_blank" rel="noopener">这里</a>有同学已经将OpenGrok环境集成到了docker中，使用起来也比较简单</p><p>首先，自己下载docker image到本地，这里需要配置一些本地工具</p><p>依赖的工具：JAVA （这不用多说了，安装个JDK1.8就可以满足）<br>一般的包管理器都可以直接安装，可以就不再细述</p><p>安装脚本为：</p><pre><code>docker run -it -d --name &lt;CONTAINER NAME&gt; \-p &lt;EXTERNAL PORT&gt;:8080 \-v &lt;LINUX JDK HOME&gt;:/usr/lib/jvm \-v &lt;OPENGROK DATA FOLDER&gt;:/var/opengrok:delegated \-w /app krazakee/opengrok</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;EXTERNAL PORT&gt;: 主机端口，由docker中端口8080映射过来，并给外部使用的</span><br><span class="line">&lt;LINUX JDK HOME&gt;: JDK的HOME目录，一般在&#x2F;usr&#x2F;lib&#x2F;下面，可以使用locate定位</span><br><span class="line">&lt;OPENGROK DATA FOLDER&gt;: 索引文件和项目代码存放的位置</span><br></pre></td></tr></table></figure><p>创建和更新索引</p><p>这也是使用这个工具的目的，这个可以使用这位同学已经做好的脚本来完成</p><pre><code>docker exec &lt;CONTAINER NAME&gt; bash -c &quot;/reindex.sh&quot;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;CONTAINER NAME&gt; : 就是你之前run的时候分配的名字，当然ID也是可以的</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/linux-kernel/dt</title>
      <link href="/2019/12/24/VimNote/linux-kernel/dt/"/>
      <url>/2019/12/24/VimNote/linux-kernel/dt/</url>
      
        <content type="html"><![CDATA[<h2 id="Device-Tree相关知识点汇总"><a href="#Device-Tree相关知识点汇总" class="headerlink" title="Device Tree相关知识点汇总"></a>Device Tree相关知识点汇总</h2><hr><h3 id="如何编译linux的设备树？"><a href="#如何编译linux的设备树？" class="headerlink" title="如何编译linux的设备树？"></a>如何编译linux的设备树？</h3><p>开启内核支持设备树选项</p><pre><code>make menuconfig ---&gt; Boot options ---&gt; Flattened Device Tree support</code></pre><p>正常编译kernel的时候会附带编译设备树</p><pre><code>make ARCH=arm LOADADDR=0x007fc0 CROSS_COMPILE=arm-linux-gnueabi- uImage</code></pre><p>不过，如果你想要单独编译所有的devicetree文件，如(dts,dtsi,*.h)这样的集合，可以使用编译系统提供的如下命令</p><pre><code>make ARCH=arm LOADADDR=0x007fc0 CROSS_COMPILE=arm-linux-gnueabi- dtbs</code></pre><p>如果你想要单独编译某一个dts文件，也有办法，可以使用编译内核时，生成的dtc工具来完成单编某一个dts文件</p><pre><code>#生成dtc工具make scripts$ROOT/scripts/dtc/dtc -I dts input.dts -O dtb -o output.dtb$ROOT/scripts/dtc/dtc -O dtb -o output.dtb input.dts #或者</code></pre><p>反编译也可以</p><pre><code>$ROOT/scripts/dtc/dtc -I dtb input.dtb -O dts -o output.dts$ROOT/scripts/dtc/dtc -O dts -o output.dts input.dtb #或者</code></pre><p>基本上，内核的设备树相关编译内容就这么多。</p><h3 id="fdtdump工具"><a href="#fdtdump工具" class="headerlink" title="fdtdump工具"></a>fdtdump工具</h3><p>这个工具可以根据发行版的包管理器进行安装,使用起来也非常简单</p><pre><code>fdtdump -hfdtdump -sd xx.dtb | tree dt.log | less #需要知道的是，//后面是分析过程信息</code></pre><h3 id="删除设备属性"><a href="#删除设备属性" class="headerlink" title="删除设备属性"></a>删除设备属性</h3><p>可以利用设备树架构提供的源语<code>delete-property</code>删除那些你不想修改原始设备文件，不过又需要定制的时候</p><pre><code>/ {    HOME: home {        property,01 = &lt;0x01&gt;;        property,02 = [00];        str,show = &quot;new&quot;;    }}// 删除时，在新的dts文件中进行如下操作/ {    &amp;HOME {        /delete-property/str,show;        /delete-property/property,02;    }}</code></pre><p>这样就可以删除不想要的属性了哦。</p><p>###</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/linux-tools/xmllint</title>
      <link href="/2019/12/24/VimNote/linux-tools/xmllint/"/>
      <url>/2019/12/24/VimNote/linux-tools/xmllint/</url>
      
        <content type="html"><![CDATA[<h2 id="xmllint的使用方法"><a href="#xmllint的使用方法" class="headerlink" title="xmllint的使用方法"></a>xmllint的使用方法</h2><h3 id="如何使用xmllint检查指定xml的格式是否正确？"><a href="#如何使用xmllint检查指定xml的格式是否正确？" class="headerlink" title="如何使用xmllint检查指定xml的格式是否正确？"></a>如何使用xmllint检查指定xml的格式是否正确？</h3><p>有时候你可能只想要查看你的xml的格式是否正确，也就是语法解析是否正确，那么可以使用下面的命令淡出查看xml的格式</p><pre><code>xmllint -noout your.xml</code></pre><p>这一般是linux发行版套件自带的，如果没有，请自行search然后install。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/hw/assert-and-deassert</title>
      <link href="/2019/12/19/VimNote/hw/assert-and-deassert/"/>
      <url>/2019/12/19/VimNote/hw/assert-and-deassert/</url>
      
        <content type="html"><![CDATA[<h2 id="这里说明一下在硬件设计中的常用术语’assert’与’de-assert’"><a href="#这里说明一下在硬件设计中的常用术语’assert’与’de-assert’" class="headerlink" title="这里说明一下在硬件设计中的常用术语’assert’与’de-assert’"></a>这里说明一下在硬件设计中的常用术语’assert’与’de-assert’</h2><blockquote><p>assert：</p></blockquote><p>把信号变为active（可以理解为有效），根据系统需求不同，该有效电平可以是高电平（即高有效）也可以是低电平（即低有效）。</p><blockquote><p>de-assert：</p></blockquote><p>解除active状态，信号变为非active状态，可以是高也可以是低。</p><p>英文解释：</p><pre><code>Assert：Set a signal to its “active” state；De-assert： Set a signal to its “inactive” state。If a signal is active-low，“asserting” that signal means setting it low and deasserting it means setting it high。</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/linux-tools/cron</title>
      <link href="/2019/12/19/VimNote/linux-tools/cron/"/>
      <url>/2019/12/19/VimNote/linux-tools/cron/</url>
      
        <content type="html"><![CDATA[<h2 id="定时执行任务-crontab"><a href="#定时执行任务-crontab" class="headerlink" title="定时执行任务 crontab"></a>定时执行任务 crontab</h2><p>很多时候，你需要定时执行很多重复的任务，这个时候，crontab工具就会发挥它的作用。</p><p>crontab是一个定时调度指定任务的工具，它有自己的守护进程，你只需要定制自己的work给它完成，就这么简单。</p><p>网络上有很多比较好的资源可以<a href="https://blog.csdn.net/ithomer/article/details/6817019" target="_blank" rel="noopener">参考</a>，也可以使用man手册查看帮助。</p><p>这里列出一个简单的例子：</p><pre><code># Cron-jobs for jenkins backup.SHELL=/bin/bashPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin10 1 * * * bash /home/rex/projects/search-web/search_job.sh</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/linux-tools/hostname</title>
      <link href="/2019/12/19/VimNote/linux-tools/hostname/"/>
      <url>/2019/12/19/VimNote/linux-tools/hostname/</url>
      
        <content type="html"><![CDATA[<h2 id="如何修改Linux的hostname"><a href="#如何修改Linux的hostname" class="headerlink" title="如何修改Linux的hostname"></a>如何修改Linux的hostname</h2><p>本文只简单介绍一些使用方法，并未涉及深入理解的部分。</p><p>首先以ubuntu为例，如果要临时修改hostname，可以这样：</p><pre><code>hostname NEW_HOSTNAME</code></pre><p>重新启动后hostname恢复原来的样子。</p><p>如果需要永久修改本机的hostname，那么请依据套件的不同，采用适合自己的方法来修改：</p><p>如果套件支持systemd，那么使用下面的简单指令可以永久修改hostname</p><pre><code>sudo hostnamectl set-hostname NEW_HOSTNAME</code></pre><p>如果是类似sysVinit这样的管理架构，那么使用传统的方法，永久修改hostnmae</p><pre><code>#step 1$ vi /etc/hostname&gt; NEW_HOSTNAME#step 2$ vi /etc/hosts&gt; 127.0.0.1 NEW_HOSTNAME#step 3$ /etc/init.d/hostname restart#On RHEL/CentOS based systems that use init, the hostname is changed by modifying:&gt; vi /etc/sysconfig/network&gt;&gt;    #/etc/sysconfig/network    NETWORKING=yes    HOSTNAME=&quot;tecmint.com&quot;    GATEWAY=&quot;192.168.0.1&quot;    GATEWAYDEV=&quot;eth0&quot;    FORWARD_IPV4=&quot;yes&quot;</code></pre><p>如果有什么疑惑可以参考<a href="https://www.tecmint.com/set-hostname-permanently-in-linux/" target="_blank" rel="noopener">这里</a></p><h2 id="如何为单台主机添加多个hostname"><a href="#如何为单台主机添加多个hostname" class="headerlink" title="如何为单台主机添加多个hostname"></a>如何为单台主机添加多个hostname</h2><p>这个需求一般不会存在，不过有时候公司的服务器默认是有命名规则的，所以如果你想要按照自己的想法来设计服务器的hostname，<br>这个时候就需要按照下面这样操作</p><p>其实也比较简单，需要注意的是/etc/hostname只能有一个名字生效，这里面不需要你进行更改，这是’主名字’,<br>那么我们修改的是 /etc/hosts，本质上是添加该服务器的alias名字，就是别名。</p><pre><code># step 1 : get your ip address$ ifconfig# step 2 : modify host name alias#/etc/hosts&gt;HOST_IP NAME_1 NAME_2</code></pre><p>具体内容请参考<a href="//www.unix.com/solaris/93371-assigning-two-hostname-single-server.html" target="_blank" rel="noopener">这里</a>的解释与<a href="https://serverfault.com/questions/155793/may-i-set-multiple-names-in-etc-hostname" target="_blank" rel="noopener">这里</a>的回答</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/editor/required-for-editor</title>
      <link href="/2019/12/15/VimNote/editor/required-for-editor/"/>
      <url>/2019/12/15/VimNote/editor/required-for-editor/</url>
      
        <content type="html"><![CDATA[<p>本文主要描述，当你使用一款编辑其的时候，应该注意那些必要的、可高效用于项目实践的方面或者功能。</p><h2 id="如何开始"><a href="#如何开始" class="headerlink" title="如何开始"></a>如何开始</h2><p>千万不要没有章法的瞎找一气，这只会浪费你的时间。</p><p>所以本文主要讲述，哪些方面的能力，是你应该关心的，并且编辑器应该支持的(它一定会支持的，只不过你可能还不知道它存在)。</p><p>现在就列举这必备需求，这不仅仅适用与某一个编辑器，而是一种思想，适合所有你能够想到的编辑器。</p><p>接下来以<code>VScode</code>为例，讲述如何快速的熟悉和使用编辑器。</p><h3 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h3><ol><li>常用的编辑器帮助入口</li><li>帮助导航按键和一些使用技巧</li><li>帮助如何进一步的理解编辑器的内容</li></ol><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>该功能大体上可以分为如下种类：</p><ol><li>项目中的文件查找</li><li>非项目中的文件查找</li><li>特定符号查找，该符号可以通过不同的后端支持生成，如：ctags，gtags，等等</li><li>指定的字符串的常规或者正则查找</li><li>由构建符号的后端提供的一些符号周边功能，如：符号定义，符号引用等</li><li>最近使用文件的列表</li></ol><h3 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/windows-tips/cmd</title>
      <link href="/2019/12/13/VimNote/windows-tips/cmd/"/>
      <url>/2019/12/13/VimNote/windows-tips/cmd/</url>
      
        <content type="html"><![CDATA[<h2 id="修改下cmd终端的显示状态，显示"><a href="#修改下cmd终端的显示状态，显示" class="headerlink" title="修改下cmd终端的显示状态，显示"></a>修改下cmd终端的显示状态，显示</h2><pre><code>chcp 65001</code></pre><h2 id="如何以root用户运行cmd"><a href="#如何以root用户运行cmd" class="headerlink" title="如何以root用户运行cmd"></a>如何以root用户运行cmd</h2><p>这里就直接找到好用的答案</p><p><a href="https://www.howtogeek.com/194041/how-to-open-the-command-prompt-as-administrator-in-windows-8.1/" target="_blank" rel="noopener">https://www.howtogeek.com/194041/how-to-open-the-command-prompt-as-administrator-in-windows-8.1/</a><br><a href="https://superuser.com/questions/42537/is-there-any-sudo-command-for-windows/269750" target="_blank" rel="noopener">https://superuser.com/questions/42537/is-there-any-sudo-command-for-windows/269750</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/linux-tools/apt-dpkg</title>
      <link href="/2019/12/13/VimNote/linux-tools/apt-dpkg/"/>
      <url>/2019/12/13/VimNote/linux-tools/apt-dpkg/</url>
      
        <content type="html"><![CDATA[<h2 id="如何在ubuntu套件上列出所有安装过的软件和版本？"><a href="#如何在ubuntu套件上列出所有安装过的软件和版本？" class="headerlink" title="如何在ubuntu套件上列出所有安装过的软件和版本？"></a>如何在ubuntu套件上列出所有安装过的软件和版本？</h2><p>sudo apt list –installed</p><p>refer to: <a href="https://phoenixnap.com/kb/how-to-list-installed-packages-on-ubuntu" target="_blank" rel="noopener">https://phoenixnap.com/kb/how-to-list-installed-packages-on-ubuntu</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/linux-tools/cifs</title>
      <link href="/2019/12/13/VimNote/linux-tools/cifs/"/>
      <url>/2019/12/13/VimNote/linux-tools/cifs/</url>
      
        <content type="html"><![CDATA[<h2 id="在linux操作系统上挂载windows操作系统"><a href="#在linux操作系统上挂载windows操作系统" class="headerlink" title="在linux操作系统上挂载windows操作系统"></a>在linux操作系统上挂载windows操作系统</h2><p>有一些工具可以很好的完成标题提到的内容，不过本文主要介绍’cifs’文件系统的挂载和使用</p><p>使用手册可以在<a href="https://linux.die.net/man/8/mount.cifs" target="_blank" rel="noopener">这里</a>得到。</p><h3 id="如何使用cifs文件系统挂载远程windows目录"><a href="#如何使用cifs文件系统挂载远程windows目录" class="headerlink" title="如何使用cifs文件系统挂载远程windows目录"></a>如何使用cifs文件系统挂载远程windows目录</h3><p>这很简单，不过需要你的linux先支持cifs文件系统才可以，所以需要安装如下工具，以ubuntu为例</p><pre><code># 这和安装samba服务差不多apt search cifs-utils&gt;    cifs-utils/bionic 2:6.8-1 amd64    Common Internet File System utilities    samba/bionic-updates,bionic-security,now 2:4.7.6+dfsg~ubuntu-0ubuntu2.13 amd64 [installed]    SMB/CIFS file, print, and login server for Unix    smbclient/bionic-updates,bionic-security 2:4.7.6+dfsg~ubuntu-0ubuntu2.13 amd64    command-line SMB/CIFS clients for Unixsudo apt install cifs-utils# 确保windows侧正确的开启共享服务,cifs服务会默认的被开启# 挂载远程windows目录/sales到本地/mnt/cifs上，-o选项的内容可以查看前文提到的帮助手册# 这只是一个例子sudo mount -t cifs //192.168.101.100/sales /mnt/cifs -o username=shareuser,password=sharepassword,domain=nixcraft</code></pre><h3 id="如何使用密码文件避免每次输入？"><a href="#如何使用密码文件避免每次输入？" class="headerlink" title="如何使用密码文件避免每次输入？"></a>如何使用密码文件避免每次输入？</h3><pre><code># 密码文件就是$HOME/.win-file.cerd，名字任意，密码格式瑞安sudo mount -t cifs -o ro,credentials=$HOME/.win-file.cerd //cnshz-nv-fl01/FILE .win-file/# 密码文件格式username=hellopassword=world</code></pre><h3 id="如何开机自动挂载文件系统？"><a href="#如何开机自动挂载文件系统？" class="headerlink" title="如何开机自动挂载文件系统？"></a>如何开机自动挂载文件系统？</h3><p>这也很简单，这里提供一个例子</p><pre><code># 在文件/etc/fstab中，添加一个挂载项，并使用指定的鉴权密码文件//cnshz-nv-fl01/FILE/balabala/share /home/jenkins/.win-file cifs auto,ro,credentials=/home/jenkins/.win-file.cred 0 0</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/python/run-system-cmd</title>
      <link href="/2019/12/13/VimNote/python/run-system-cmd/"/>
      <url>/2019/12/13/VimNote/python/run-system-cmd/</url>
      
        <content type="html"><![CDATA[<h2 id="python运行外部操作系统指令的方法"><a href="#python运行外部操作系统指令的方法" class="headerlink" title="python运行外部操作系统指令的方法"></a>python运行外部操作系统指令的方法</h2><p>python有很多方法让你可以运行操作系统提供的外部指令，如linux和windows的一些你看到的所谓的命令。</p><p>下面列出一些可用的库</p><ol><li>os.system</li><li>os.popen</li><li>command</li><li>subprocess</li></ol><p>这些都是可以使用的，根据不同的python版本可能会有一些不同。</p><p>不过我不建议你都了解他们，如果你感兴趣的话当然可以，不过最好不要浪费时间。</p><p>本文需要强调的是，使用<code>subprocess</code>标准库吧，并且一直使用它吧，他是很高级的。</p><p>不过需要注意的是，如果你是用的python版本不是很高，那么可能其他的库是你需要了解的。</p><p>参见 <a href="https://www.python.org/dev/peps/pep-0324/" target="_blank" rel="noopener">PEP 324</a> – 提出 subprocess 模块的 PEP</p><p>官方3.8版本的说明文档在<a href="https://docs.python.org/zh-cn/3/library/subprocess.html#subprocess.TimeoutExpired" target="_blank" rel="noopener">这里</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/linux-compile/multi-src-files-to-single-ko</title>
      <link href="/2019/12/13/VimNote/linux-compile/multi-src-files-to-single-ko/"/>
      <url>/2019/12/13/VimNote/linux-compile/multi-src-files-to-single-ko/</url>
      
        <content type="html"><![CDATA[<h2 id="将多个内核驱动源文件编译成为一个单独的ko文件"><a href="#将多个内核驱动源文件编译成为一个单独的ko文件" class="headerlink" title="将多个内核驱动源文件编译成为一个单独的ko文件"></a>将多个内核驱动源文件编译成为一个单独的ko文件</h2><p>正如标题所说，本文讲述在linux内核中，如何将多个源文件编译成一个ko文件发布。</p><h3 id="准备源文件"><a href="#准备源文件" class="headerlink" title="准备源文件"></a>准备源文件</h3><pre><code>$ tree.├── foo_01.c├── foo_02.c├── foo_exit.c├── foo.h├── foo_init.c├── Makefile└── sub    ├── sub_foo.c    └── sub_foo.h1 directory, 8 files</code></pre><p>源文件的内容如下，仅仅作为例子</p><p>foo_init.c</p><pre><code>#include &lt;linux/init.h&gt;#include &lt;linux/module.h&gt;#include &quot;foo.h&quot;#include &quot;sub/sub_foo.h&quot;int __init foo_init(void){    printk(&quot;%s\n&quot;, __func__);    m_show();    sub_print();    return 0;}module_init(foo_init);MODULE_LICENSE(&quot;GPL&quot;);</code></pre><p>foo_exit.c</p><pre><code>#include &lt;linux/init.h&gt;#include &lt;linux/module.h&gt;#include &quot;foo.h&quot;void __exit foo_exit(void){    printk(KERN_ERR &quot;sum: %d\n&quot;, m_sum(10, 1));    printk(KERN_ERR &quot;foo exit.\n&quot;);}module_exit(foo_exit);</code></pre><p>foo_01.c</p><pre><code>#include &lt;linux/module.h&gt;void m_show(void){    printk(KERN_ERR &quot;%s\n&quot;, __func__);}</code></pre><p>foo_02.c</p><pre><code>int m_sum(int a, int b){    return (a + b);}</code></pre><p>foo.h</p><pre><code>int m_sum(int, int);void m_show(void);</code></pre><p>sub/sub_foo.h</p><pre><code>void sub_print(void);</code></pre><p>sub/sub_foo.c</p><pre><code>#include &lt;linux/module.h&gt;void sub_print(void){    printk(KERN_ERR &quot;%s\n&quot;, __func__);}</code></pre><p>Makefile</p><pre><code># coding=UTF-8ifneq ($(KERNELRELEASE),)#{soga-objs += foo_01.osoga-objs += foo_02.osoga-objs += foo_init.o foo_exit.osoga-objs += sub/sub_foo.oobj-m := foo.ofoo-objs := $(soga-objs)elsePWD           := $(shell pwd)ARCH          ?= armKDIR          ?= /labs/linux-lab/output/arm/linux-v2.6.36-versatilepb/CROSS_COMPILE ?= arm-linux-gnueabi-all:        make -C $(KDIR) M=$(PWD) ARCH=$(ARCH) CROSS_COMPILE=$(CROSS_COMPILE) modulesclean:        $(H)rm -rf *.ko *.o *.symvers *.cmd *.cmd.o *.mod.c *.order .tmp_versions/ .*.o.cmd .*.mod.o.cmd .*.ko.cmd */*.oendif</code></pre><h3 id="简单的解释一下"><a href="#简单的解释一下" class="headerlink" title="简单的解释一下"></a>简单的解释一下</h3><p>首先，你已经看到，上述的代码实现了在不同的源文件中，实现linux驱动编写的例子。<br>这个例子是可行的，并且你可以在任何你想要的地方使用它，模仿它来编程。<br>例子中的代码并没有什么意思，而且也没有实际的意义，不过有几点是可以支持这样编程的基础：</p><ol><li><p>编译器的基础obj依旧是以文件为单位，所以foo.h是必要的，如果你不想这样，可以尝试’#include “foo_01.c”‘</p></li><li><p>使用这个例子，你可以实现不同的目录分级，这个依赖于linux内核的编译机制，看看Makefile中的’soga-objs += sub/sub_foo.o’</p></li><li><p>需要注意基础的linux驱动编写方法，比如一个模块中需要有license，不论在哪里，你都要保证ko中包含。</p></li><li><p>重点中的重点是Makefile中的下面的语法</p><p> soga-objs += foo_01.o<br> soga-objs += foo_02.o<br> soga-objs += foo_init.o foo_exit.o<br> soga-objs += sub/sub_foo.o</p><p> obj-m := foo.o<br> foo-objs := $(soga-objs) # &gt;&gt; foo-objs 中，foo是一个编译出来的名字，并且前面需要有obj-m支撑，soga-objs就是要编译成一个ko所需的所有source files.</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/vim/vim-help</title>
      <link href="/2019/11/28/VimNote/vim/vim-help/"/>
      <url>/2019/11/28/VimNote/vim/vim-help/</url>
      
        <content type="html"><![CDATA[<h2 id="VIM-Help-使用方法"><a href="#VIM-Help-使用方法" class="headerlink" title="VIM Help 使用方法"></a>VIM Help 使用方法</h2><p>本文主要介绍VIM帮助文档的使用方法，以便开发者或者使用者可以通过本文提供的方法，<br>快速定位或者找到你想要的且VIM已经提供的帮助。</p><h3 id="常用的内置方法"><a href="#常用的内置方法" class="headerlink" title="常用的内置方法"></a>常用的内置方法</h3><p>按照类别列出VIM内置函数：</p><pre><code>:help function-list</code></pre><p>按照字母顺序列出内置函数：</p><pre><code>:help functions</code></pre><p>查看内建函数的解释：</p><pre><code>:help built_in_func_name()</code></pre><p>查看所有VIM支持的类型：</p><pre><code>:help type()</code></pre><p>查看所有内置自动命令事件类型：</p><pre><code>:help autocmd-events</code></pre><p>列出所有脚本与编号</p><pre><code>:scriptnames</code></pre><p>查看按键映射的时候，这两个函数比较有用：</p><pre><code>mapcheck({lhs})hasmapto({rhs})</code></pre><p>当 :source 命令之后加个 ! 符号，就是表示所读的 文件不是当作 ex 命令的脚本了，而是当作普通命令的“宏”了</p><p>查看命令映射参数<expr>的内置说明，多了解一些映射函数的限制</p><pre><code>:help map-&lt;expr&gt;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/docker/install-and-remove-docker</title>
      <link href="/2019/11/28/VimNote/docker/install-and-remove-docker/"/>
      <url>/2019/11/28/VimNote/docker/install-and-remove-docker/</url>
      
        <content type="html"><![CDATA[<h2 id="如何安装docker"><a href="#如何安装docker" class="headerlink" title="如何安装docker"></a>如何安装docker</h2><p>本文以ubuntu-18为例，参考<a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-18-04" target="_blank" rel="noopener">docker官网推荐步骤</a>。</p><h2 id="如何删除docker应用及其相关内容"><a href="#如何删除docker应用及其相关内容" class="headerlink" title="如何删除docker应用及其相关内容"></a>如何删除docker应用及其相关内容</h2><p>其实这个问题是困扰很多使用docker，并有时候会对它深恶痛疾的开发人员。</p><p>笔者遇到过docker打印log将磁盘空间填满的情况。</p><p>所以，有时候你可能需要彻底删除本地的docker，那么你可以这样做：</p><p>以ubuntu-18版本为例：</p><p>首先，查询包管理器都安装了哪些docker相关的内容</p><pre><code>dpkg -l | grep -i docker</code></pre><p>然后根据你查询到的内容进行删除，大概样例如下</p><pre><code>sudo apt-get purge -y docker-engine docker docker.io docker-ce docker-ce-clisudo apt-get autoremove -y --purge docker-engine docker docker.io docker-ce docker-ce-cli</code></pre><p>当然这只是包管理器帮忙删除的一些套件中的内容，它并不会删除用户数据，如image，containers，volumes以及配置等等。</p><p>如果你想要删除这些残留的内容，可以使用下面的方法删除</p><pre><code>sudo rm -rf /var/lib/docker /etc/dockersudo rm /etc/apparmor.d/dockersudo groupdel dockersudo rm -rf /var/run/docker.sock</code></pre><p>参考资料：<br><a href="https://askubuntu.com/questions/935569/how-to-completely-uninstall-docker" target="_blank" rel="noopener">skubuntu</a>和<a href="https://stackoverflow.com/questions/51206062/remove-docker-on-ubuntu-18" target="_blank" rel="noopener">stackoverflow</a>有一些相关的讨论，如果使用不同的发行套件，请自行查询。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/git/clean</title>
      <link href="/2019/11/28/VimNote/git/clean/"/>
      <url>/2019/11/28/VimNote/git/clean/</url>
      
        <content type="html"><![CDATA[<h2 id="使用git清理工作空间中的未跟踪文件或目录"><a href="#使用git清理工作空间中的未跟踪文件或目录" class="headerlink" title="使用git清理工作空间中的未跟踪文件或目录"></a>使用git清理工作空间中的未跟踪文件或目录</h2><p>首先查看当前工作目录下有哪些文件或者目录需要清理</p><pre><code>git clean -n</code></pre><p>然后，有一些针对性的操作能够满足你的需求：</p><pre><code>#只删除文件git clean -f#删除目录和文件git clean -fd#删除忽略的文件git clean -fX#删除忽略的文件和没有忽略的文件git clean -fx#删除忽略的和没有忽略的文件和目录git clean -fdx</code></pre><p>另外，如果你使用repo管理仓库，可以这样使用来清理你不想要的所有内容：</p><pre><code>repo forall -c git clean -fdx</code></pre><p>详细内容请参考<a href="https://git-scm.com/docs/git-clean" target="_blank" rel="noopener">git-clean</a>和<a href="https://stackoverflow.com/questions/61212/how-to-remove-local-untracked-files-from-the-current-git-working-tree/20846779" target="_blank" rel="noopener">stackoverflow的回答</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/goals</title>
      <link href="/2019/11/26/VimNote/goals/"/>
      <url>/2019/11/26/VimNote/goals/</url>
      
        <content type="html"><![CDATA[<h1 id="迷航灯塔"><a href="#迷航灯塔" class="headerlink" title="迷航灯塔"></a>迷航灯塔</h1><p>毅力比智慧更重要！</p><p>笔者认为，人之所以焦虑迷茫，缺乏自信心，归根结底是因为没有目标，或者目标太大。</p><p>所以，笔者也尝试学习前人的哲学，树立一个可视化的目标，并将穷我一生来尽量完成它。</p><h2 id="快速学习的能力"><a href="#快速学习的能力" class="headerlink" title="快速学习的能力"></a>快速学习的能力</h2><p>快速模仿其他人的优点与做法，通过思考与调整，变成适合自己的方法。</p><p>人并不是多线程，关注的内容只有当前的点，所以请使用TODO-LIST与时间管理方法，控制效率。</p><p>读书或者阅读代码的时候需要多思考，并且在关键位置做笔记或者mark log，类似于变向实践，可以增强记忆</p><h2 id="快速诊断问题的能力"><a href="#快速诊断问题的能力" class="headerlink" title="快速诊断问题的能力"></a>快速诊断问题的能力</h2><p>当遇到问题没有思绪的时候，请思考如何让问题输出更多的有用信息，以便于找到更多的线索和方向</p><h2 id="效率问题的考虑"><a href="#效率问题的考虑" class="headerlink" title="效率问题的考虑"></a>效率问题的考虑</h2><p>没有想好如何操作的时候，请不要去做，至少有一点头绪再尝试。</p><p>使用所有工具的时候请注意效率，不要做无用功，如编辑器等，为什么打出来的字还要重复的不断删除呢？</p><p><img src="images/joba.png" alt="No Resource"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/C/c-if-else</title>
      <link href="/2019/11/26/VimNote/C/c-if-else/"/>
      <url>/2019/11/26/VimNote/C/c-if-else/</url>
      
        <content type="html"><![CDATA[<h2 id="C语言中的悬挂式else"><a href="#C语言中的悬挂式else" class="headerlink" title="C语言中的悬挂式else"></a>C语言中的<code>悬挂式else</code></h2><p>C语言并不像python这类语言有缩进的限制，所以也就不存在<code>悬挂式else</code></p><p>那么什么是<code>悬挂式else</code>，我们先看下例子</p><p>首先说明，下面例子中的代码，都是能够在笔者主机平台(x86)使用gcc编译通过，并且每部分都可以正常运行的。</p><p>为了说明问题，并且聚焦问题，并没有使用宏来简化代码。</p><pre><code>#include &lt;stdio.h&gt;#include &lt;string.h&gt;static void test_entry_01(int a, int b){    if (a)        if (b)            printf(&quot;%s&gt; b if\n&quot;, __func__);        else            printf(&quot;%s&gt; b else\n&quot;, __func__);        else            printf(&quot;%s&gt; who am I ? # a if ??? yes\n&quot;, __func__);}static void test_entry_02(int a, int b){    if (a)        if (b)            printf(&quot;%s&gt; b if\n&quot;, __func__);    else    {        printf(&quot;%s&gt; a else ? no I&apos;m b else.&quot;, __func__); // no new line        printf(&quot;more info...\n&quot;);    }        else            printf(&quot;%s&gt; who am I ? # I&apos;m a else.\n&quot;, __func__);}static void test_entry_03(int a, int b, int c){    if (a)        printf(&quot;%s&gt; nothing to be done...\n&quot;, __func__);        if (b)            printf(&quot;%s&gt; b if, but not nest in a.\n&quot;, __func__);        else            printf(&quot;%s&gt; b else ? yes\n&quot;, __func__);            if (c)                printf(&quot;%s&gt; who am I? I don&apos;t belong to any of the control blocks above.\n&quot;, __func__);    else        printf(&quot;%s&gt; who am I? I&apos;m c else.\n&quot;, __func__);}int main( int argc, char **argv){    int a, b, c;    if (argc != 4)    {        printf(&quot;Usage: &lt;APPNAME&gt; a b c\n&quot;);        return 0;    }    a = strcmp(argv[1], &quot;1&quot;) == 0 ? 1: 0;    b = strcmp(argv[2], &quot;1&quot;) == 0 ? 1: 0;    c = strcmp(argv[3], &quot;1&quot;) == 0 ? 1: 0;    printf(&quot;a=%d, b=%d, c=%d\n&quot;, a,b,c);    test_entry_01(a,b);    test_entry_02(a,b);    test_entry_03(a,b,c);    return 0;}</code></pre><p>编译并查看输出：</p><pre><code>$ gcc -o test ./test_else.c$ ./test&gt; Usage: &lt;APPNAME&gt; a b c$ ./test 1 1 1&gt;a=1, b=1, c=1test_entry_01&gt; b iftest_entry_02&gt; b iftest_entry_03&gt; nothing to be done...test_entry_03&gt; b iftest_entry_03&gt; who am I? I don&apos;t belong to any of the control blocks above.</code></pre><p>这里并没有列出所有的情况，感兴趣的小伙伴可以自己编译试试。</p><p>其实printf包含的字符串已经说明了所有相关的可能。</p><p>小结：</p><ol><li>悬挂式else的语法并不具有很好的可读性，请在使用C语言的时候加上控制块<code>{}</code></li><li>添加控制块<code>{}</code>后，可以避免你认为的这种歧义性</li><li>if-else在不添加控制块符号<code>{}</code>的时候，表示后面很简短，简短到只能允许一条指令</li><li>请在书写代码的时候注意缩进，虽然C语言很自由，但请体谅有可能阅读你代码的其他人。</li></ol><h2 id="如何写出好看的C语言if-else控制流"><a href="#如何写出好看的C语言if-else控制流" class="headerlink" title="如何写出好看的C语言if-else控制流"></a>如何写出好看的C语言if-else控制流</h2><p>当你阅读比较好的C项目代码的时候，你可能会感慨为何人家的代码写的这么好，一看就懂，或者控制流程很是流畅？</p><p>这个时候你其实应该停下你的动作，等等你的灵魂，仔细花时间琢磨下为什么他们写的好。</p><p>我写一个例子，看看为什么这样写</p><pre><code>#include &lt;stdio.h&gt;#include &lt;string.h&gt;#define TRUE  1#define FALSE 0int do_it_01(int cond){    if (cond != 1)    {        printf(&quot;%s&gt; normal branch\n&quot;, __func__);        return TRUE;    }    else    {        printf(&quot;%s&gt; exception branch\n&quot;, __func__);        return FALSE;    }}int do_it_02(int cond){    if (cond != 2)    {        printf(&quot;%s&gt; normal branch\n&quot;, __func__);        return TRUE;    }    else    {        printf(&quot;%s&gt; exception branch\n&quot;, __func__);        return FALSE;    }}int do_it_03(int cond){    if (cond != 3)    {        printf(&quot;%s&gt; normal branch\n&quot;, __func__);        return TRUE;    }    else    {        printf(&quot;%s&gt; exception branch\n&quot;, __func__);        return FALSE;    }}int do_it_04(int cond){    if (cond != 4)    {        printf(&quot;%s&gt; normal branch\n&quot;, __func__);        return TRUE;    }    else    {        printf(&quot;%s&gt; exception branch\n&quot;, __func__);        return FALSE;    }}int deal_exception(){    printf(&quot;deal exception...\n&quot;);    return TRUE;}int main (int argc, char ** argv){    int cond;    static int exception = 1;    if (argc != 3){        printf(&quot;Usage: &lt;appname&gt; cond exception\n&quot;);        return 0;    }    // simple implement, just for test.    cond = *(argv[1]) - &apos;0&apos;;    exception = *(argv[2]) - &apos;0&apos;;    printf(&quot;cond: %d, exception: %d\n&quot;, cond,exception);    if (!do_it_01(cond))    {        printf(&quot;do_it_01 err ? do some thing.\n&quot;);        return -1;    }    else if (!do_it_02(cond))    {        printf(&quot;do_it_02 err ? do some thing.\n&quot;);        return -2;    }    else if (!do_it_03(cond))    {        printf(&quot;do_it_03 err ? do some thing.\n&quot;);        return -3;    }    else if (!do_it_04(cond))    {        printf(&quot;do_it_04 err ? do some thing.\n&quot;);        return -4;    }    else    {        if (exception){            deal_exception();            return -5;        }        else        {            printf(&quot;default..., do some process..\n&quot;);        }    }    return 0;}</code></pre><p>执行与输出结果，同学可以自行尝试，本文代码可以正常编译运行</p><pre><code>$ ./test 5 0&gt;cond: 5, exception: 0do_it_01&gt; normal branchdo_it_02&gt; normal branchdo_it_03&gt; normal branchdo_it_04&gt; normal branchdefault..., do some process..$ ./test 5 1&gt;cond: 5, exception: 1do_it_01&gt; normal branchdo_it_02&gt; normal branchdo_it_03&gt; normal branchdo_it_04&gt; normal branchdeal exception...$ ./test 3 0&gt;cond: 3, exception: 0do_it_01&gt; normal branchdo_it_02&gt; normal branchdo_it_03&gt; exception branchdo_it_03 err ? do some thing.</code></pre><p>这里没有列出所有的输出结果，不过已经可以从源码上能够说明问题。</p><p>这样写的好处有哪些：</p><ol><li>易读，流程一条线，异常很明显，都是在判断失败后处理错误逻辑</li><li>函数设计结构统一，返回值是精心设定的</li><li>好看的输出格式</li></ol><p>设计要点：</p><ol><li>前文提到，函数的返回值需要精心设计，当然，如果返回的TRUE、FALSE不能满足，其实其他的值也是可以的，只不过要多加判断</li><li>书写逻辑一条线，异常都在判断if失败的时候处理</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/bash/foreach</title>
      <link href="/2019/11/26/VimNote/bash/foreach/"/>
      <url>/2019/11/26/VimNote/bash/foreach/</url>
      
        <content type="html"><![CDATA[<h2 id="bash-shell-中的遍历操作"><a href="#bash-shell-中的遍历操作" class="headerlink" title="bash shell 中的遍历操作"></a>bash shell 中的遍历操作</h2><h3 id="使用内部字段分隔符分割输出流"><a href="#使用内部字段分隔符分割输出流" class="headerlink" title="使用内部字段分隔符分割输出流"></a>使用内部字段分隔符分割输出流</h3><p>有时候你想要使用shell的for遍历变量或者其他的输入流，<br>又苦于找不到好的方法来满足自己的分隔要求，那么请试试这个：</p><pre><code>cookie=&quot;hello,world,top,bottom,upper&quot;OLD_IFS=$IFSIFS=&apos;,&apos;for x in $cookiedo    echo $xdoneIFS=$OLD_IFS</code></pre><p>由于’IFS’是控制全局分隔符的全局环境变量，请慎重的处理它，并适当的根据需要还原它。</p><h3 id="使用tr来控制分隔符的输出"><a href="#使用tr来控制分隔符的输出" class="headerlink" title="使用tr来控制分隔符的输出"></a>使用tr来控制分隔符的输出</h3><p>当你不想使用全局’IFS’环境控制分隔符的时候，可以使用外部（其实也是linux发行版内置的）工具’tr’来完成分割。<br>试试这个方法：</p><pre><code>cookie=&quot;hello,world,top,bottom,upper&quot;for i in `echo $cookie | tr &quot;,&quot; &quot; &quot;`do    echo $i;done</code></pre><p>因为我们只是想要处理以特定分割符分割的项，所以根据你想要的操作，将’,’转化为系统默认的’ ‘（空格）字符即可。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/bash/strip_str</title>
      <link href="/2019/11/22/VimNote/bash/strip_str/"/>
      <url>/2019/11/22/VimNote/bash/strip_str/</url>
      
        <content type="html"><![CDATA[<h2 id="bash-shell-截取字符串"><a href="#bash-shell-截取字符串" class="headerlink" title="bash shell 截取字符串"></a>bash shell 截取字符串</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;string: start :length&#125;</span>       <span class="comment"># 从 string 字符串的左边第 start 个字符开始，向右截取 length 个字符。</span></span><br><span class="line"><span class="variable">$&#123;string: start&#125;</span>               <span class="comment"># 从 string 字符串的左边第 start 个字符开始截取，直到最后。</span></span><br><span class="line"><span class="variable">$&#123;string: 0-start :length&#125;</span>     <span class="comment"># 从 string 字符串的右边第 start 个字符开始，向右截取 length 个字符。</span></span><br><span class="line"><span class="variable">$&#123;string: 0-start&#125;</span>             <span class="comment"># 从 string 字符串的右边第 start 个字符开始截取，直到最后。</span></span><br><span class="line"><span class="variable">$&#123;string#*chars&#125;</span>               <span class="comment"># 从 string 字符串第一次出现 *chars 的位置开始，截取 *chars 右边的所有字符。</span></span><br><span class="line"><span class="variable">$&#123;string##*chars&#125;</span>              <span class="comment"># 从 string 字符串最后一次出现 *chars 的位置开始，截取 *chars 右边的所有字符。</span></span><br><span class="line"><span class="variable">$&#123;string%*chars&#125;</span>               <span class="comment"># 从 string 字符串第一次出现 *chars 的位置开始，截取 *chars 左边的所有字符。</span></span><br><span class="line"><span class="variable">$&#123;string%%*chars&#125;</span>              <span class="comment"># 从 string 字符串最后一次出现 *chars 的位置开始，截取 *chars 左边的所有字符。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/linux-tools/dudf</title>
      <link href="/2019/11/22/VimNote/linux-tools/dudf/"/>
      <url>/2019/11/22/VimNote/linux-tools/dudf/</url>
      
        <content type="html"><![CDATA[<h1 id="磁盘空间查看工具"><a href="#磁盘空间查看工具" class="headerlink" title="磁盘空间查看工具"></a>磁盘空间查看工具</h1><pre><code>df &amp;&amp; du</code></pre><h2 id="帮助文档"><a href="#帮助文档" class="headerlink" title="帮助文档"></a>帮助文档</h2><pre><code>man df # info dfman du # info du</code></pre><h2 id="常用示例"><a href="#常用示例" class="headerlink" title="常用示例"></a>常用示例</h2><h3 id="查看指定目录的总计大小，不显示每个子目录的容量"><a href="#查看指定目录的总计大小，不显示每个子目录的容量" class="headerlink" title="查看指定目录的总计大小，不显示每个子目录的容量"></a>查看指定目录的总计大小，不显示每个子目录的容量</h3><pre><code>du -sh</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/vim/jumps</title>
      <link href="/2019/11/20/VimNote/vim/jumps/"/>
      <url>/2019/11/20/VimNote/vim/jumps/</url>
      
        <content type="html"><![CDATA[<h2 id="VIM-中使用jumps命令的技巧"><a href="#VIM-中使用jumps命令的技巧" class="headerlink" title="VIM 中使用jumps命令的技巧"></a>VIM 中使用<code>jumps</code>命令的技巧</h2><p>很多人都不太清楚VIM内置的jumps命令应该怎么用？</p><p>其实很简单，使用<code>jumps</code>命令查看跳转位置堆栈表，然后使用<code>&lt;c-o&gt;</code> 和 <code>&lt;c-i&gt;</code>配合<code>&lt;num&gt;</code>跳转到指定位置。</p><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   2     1    0 ~&#x2F;VimNote&#x2F;vim&#x2F;vim-grep.md</span><br><span class="line">   1     5    0 ~&#x2F;VimNote&#x2F;vim&#x2F;jumps.md</span><br><span class="line">&gt;  0   234   20 boolean qbi_qmux_is_qmi_ctl_request</span><br><span class="line">   1   237    0 uint32      len</span><br><span class="line">   2  1142    6 ~&#x2F;tmp&#x2F;mbim&#x2F;qbi&#x2F;platform&#x2F;src&#x2F;qbi_hc_linux.c</span><br></pre></td></tr></table></figure><p>‘&gt;’表示当前光标位置，只要你看到想要去的地方。<br>使用<code>&lt;num&gt;</code> + <code>&lt;c-o&gt;</code>，如<code>2&lt;C-o&gt;</code>就跳到<code>~/VimNote/vim/vim-grep.md</code>。<br>使用<code>&lt;num&gt;</code> + <code>&lt;c-i&gt;</code>，如<code>1&lt;C-i&gt;</code>就跳到<code>uint32      len</code>。</p><h2 id="不得不提的插件"><a href="#不得不提的插件" class="headerlink" title="不得不提的插件"></a>不得不提的插件</h2><p><code>vim-bookmarks</code></p><p>这个插件真的很不错，强烈推荐。</p><p>获取位置<a href="https://vimawesome.com/plugin/vim-bookmarks" target="_blank" rel="noopener">在这里</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/ideas</title>
      <link href="/2019/11/20/VimNote/ideas/"/>
      <url>/2019/11/20/VimNote/ideas/</url>
      
        <content type="html"><![CDATA[<h2 id="一些编程的想法"><a href="#一些编程的想法" class="headerlink" title="一些编程的想法"></a>一些编程的想法</h2><ol><li>编程接龙<br> from user –&gt; kernel –&gt; user –…</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/linux-tools/grep</title>
      <link href="/2019/11/19/VimNote/linux-tools/grep/"/>
      <url>/2019/11/19/VimNote/linux-tools/grep/</url>
      
        <content type="html"><![CDATA[<h2 id="使用grep"><a href="#使用grep" class="headerlink" title="使用grep"></a>使用grep</h2><p>本章内容主要讲述如何使用linux常用工具grep来搜索文本内容。</p><h3 id="经常查看帮助文档是一个好习惯"><a href="#经常查看帮助文档是一个好习惯" class="headerlink" title="经常查看帮助文档是一个好习惯"></a>经常查看帮助文档是一个好习惯</h3><pre><code>man grep #or info grep</code></pre><h3 id="写在前面的一些内容"><a href="#写在前面的一些内容" class="headerlink" title="写在前面的一些内容"></a>写在前面的一些内容</h3><p>grep的命令行语法格式：</p><pre><code>grep OPTIONS PATTERN INPUT_FILE_NAMES</code></pre><p>grep命令的选项说明：</p><ol><li>一些短选项是符合POSIX.2协议标准的</li><li>长选项都是GNU扩展选项</li></ol><p>什么叫’单词’?<br>grep认定的单词是：下划线，数字，字母组成的内容。</p><p>grep输出的shell状态码：<br>通常情况下，如果能匹配到内容，则退出状态码为0，<br>否则为1。但是如果发生了错误，则退出状态码为2.(除非使用了”-s”或”-q”选项)</p><h3 id="控制匹配模式的选项"><a href="#控制匹配模式的选项" class="headerlink" title="控制匹配模式的选项"></a>控制匹配模式的选项</h3><blockquote><p>-e PATTERN # –regexp=PATTERN’</p></blockquote><p>明确指定使用此处的PATTERN作为待匹配的pattern</p><blockquote><p>-f FILE # –file=FILE</p></blockquote><p>从FILE文件中获取PATERN列表，每行一个。</p><blockquote><p>-i # –ignore-case</p></blockquote><p>忽略大小写</p><blockquote><p>-v # –invert-match</p></blockquote><p>反转匹配结果，优先级高于’-l’选项，后面看到</p><blockquote><p>-w # –word-regexp</p></blockquote><p>全词匹配，如果你输入’abc’，而文本中是’abcd’无法匹配，必须全词匹配。</p><blockquote><p>-x # –line-regexp</p></blockquote><p>全行匹配，什么是一行？就是到’\n’为止。<br>和’-w’选项一样，是全部内容匹配才可以。</p><h3 id="控制输出内容"><a href="#控制输出内容" class="headerlink" title="控制输出内容"></a>控制输出内容</h3><blockquote><p>-c # –count</p></blockquote><p>输出匹配到行的数量，与’-v’选项可以表示未匹配到行的数量</p><blockquote><p>–color[=WHEN]</p></blockquote><p>输出颜色，WHEN有never, always, auto,一般我们设置了auto选项</p><blockquote><p>-L # –files-without-match</p></blockquote><p>输出未能匹配到的文件名列表</p><blockquote><p>-l # –files-with-matches</p></blockquote><p>输出匹配到的文件名列表</p><blockquote><p>-m NUM # –max-count=NUM</p></blockquote><p>这个一般配合脚本执行，使用这个选项可以在当前匹配到NUM个行时停止执行读取搜索文件。<br>不过这个停止时暂时的，并且grep会标记这次索引的最后一次匹配行的位置，使得调用两一个进程可以从此处恢复并继续向下搜索。</p><pre><code>while grep -m 1 PATTERNdoecho xxxxdone &lt; FILE</code></pre><blockquote><p>-o # –only-matching</p></blockquote><p>输出匹配到的字符串，而不是输出整行内容。调式与练习时候还是不错的。</p><blockquote><p>-s # –no-messages</p></blockquote><p>禁止输出因文件不存在或文件没有读权限而产生的错误信息.</p><p>注意在POSIX与GNU规范中，有所不同，可以在grep中添加重定向到/dev/null设备节点上。</p><h3 id="控制输出行的前缀与上下文"><a href="#控制输出行的前缀与上下文" class="headerlink" title="控制输出行的前缀与上下文"></a>控制输出行的前缀与上下文</h3><blockquote><p>-H # –with-filename</p></blockquote><p>输出匹配的文件名字，在搜索多个文件的时候，这个选项时默认的<br>一般我们也打开这个选项，毕竟在终端中执行命令是为了定位内容位置</p><blockquote><p>-h # –no-filename</p></blockquote><p>禁止输出文件名称，这在搜索一个文件的时候时默认的</p><blockquote><p>-Z # –null</p></blockquote><p>在输出文件名时，使用’\0’放在文件名字的后面，进而替代原本使用的字符，如’\n’或者’:’</p><ol><li>grep -lZ 输出每个文件都在同一行，而不是分行</li><li>grep -HZ 输出文件名字后没有冒号</li></ol><blockquote><p>-A NUM /-B NUM / -C NUM #(–after-context=NUM) | (–before-context=NUM) | (–context=NUM)</p></blockquote><p>附加输出在匹配到的行的后面，前面，或者前后的NUM行的内容</p><blockquote><p>z # –null-data</p></blockquote><p>以’\0’最为输入行的分隔符，而不再以换行符分割，为grep提供跨行匹配的能力.</p><h3 id="文件和目录的选择"><a href="#文件和目录的选择" class="headerlink" title="文件和目录的选择"></a>文件和目录的选择</h3><blockquote><p>–exclude=GLOB</p></blockquote><p>忽略文件名称（不加目录也叫basename）能被GLOB匹配到的文件。GLOB通配符包括：”*“、”?”和”[…]”。</p><blockquote><p>–exclude-from=FILE</p></blockquote><p>从FILE中读取exclude的排除规则。</p><blockquote><p>–exclude-dir=DIR</p></blockquote><p>筛选出不进行递归搜索的目录，使用DIR进行匹配。</p><blockquote><p>–include=GLOB</p></blockquote><p>只搜索basename匹配GLOB的文件中的内容</p><blockquote><p>-r # -R –recursive</p></blockquote><p>递归搜索给定的目录</p><h3 id="grep的后端引擎"><a href="#grep的后端引擎" class="headerlink" title="grep的后端引擎"></a>grep的后端引擎</h3><p>有4种grep程序分别支持不同的搜索引擎，使用下面4个选项可以选择使用哪种grep程序。</p><blockquote><p>-G # –basic-regexp</p></blockquote><p>使用基础正则表达式引擎解析PATTERN，因此只支持基础正则表达式(BRE)。<br>这是默认grep使用的后端。</p><blockquote><p>-E #–extended-regexp</p></blockquote><p>使用扩展正则表达式引擎解析PATTERN，因此支持扩展正则表达式(ERE)。(‘-E’是POSIX指定的选项。)</p><blockquote><p>-F #–fixed-strings</p></blockquote><p>不识别正则表达式，而是使用字符的字面意义解析PATTERN，因此只支持固定字符串的精确匹配。(‘-F’是POSIX指定的选项。)</p><blockquote><p>-P #–perl-regexp</p></blockquote><p>使用perl正则表达式引擎解析PATTERN，因此支持Perl正则表达式。但该程序正处于研究测试阶段，因此会给出一个警告。</p><p>此外，”grep -E”和”grep -F”可分别简写为egrep和fgrep。但这两个简写程序是传统写法，已被废弃，虽仍支持，但只是为了兼容老版本程序。</p><p>还有zgrep和pgrep，但它们不是grep家族的程序，zgrep是gzip提供，pgrep用于查看进程名和pid的映射关系</p><h3 id="grep-支持的正则表达式"><a href="#grep-支持的正则表达式" class="headerlink" title="grep 支持的正则表达式"></a>grep 支持的正则表达式</h3><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/vim/vim-built-in-tips</title>
      <link href="/2019/11/18/VimNote/vim/vim-built-in-tips/"/>
      <url>/2019/11/18/VimNote/vim/vim-built-in-tips/</url>
      
        <content type="html"><![CDATA[<h1 id="VIM内置功能的使用技巧"><a href="#VIM内置功能的使用技巧" class="headerlink" title="VIM内置功能的使用技巧"></a>VIM内置功能的使用技巧</h1><p>很多开发者都狂热于VIM的可定制话，并迷失在VIM众多插件的海洋中，无法自拔。</p><p>其实VIM作为一个好用的文本编辑器，已经内置了很多好用的功能，一起看看吧。</p><p>使用内置技巧有一个好处，那就是你可以在不同的机器上有相同的动作，<br>别人看的眼花缭乱的时候，你可以牛逼轰轰的拂袖而去。</p><h2 id="如何手动reload你的文件到内存？"><a href="#如何手动reload你的文件到内存？" class="headerlink" title="如何手动reload你的文件到内存？"></a>如何手动reload你的文件到内存？</h2><p>有时候我们对一个文件可能有多个buffer与之对应，并且可能在不同的时候进行修改，<br>这很可能引起同步问题，那使用VIm的时候如何使用手动更新当前文件的内存映射呢？</p><pre><code>:e</code></pre><p>就这么简单的一句话。</p><p>如果你不想要存储你当时的所有修改，请使用下面的指令将文件的内存映射恢复到原来(或者其他地方已经修改后的版本)</p><pre><code>:e!</code></pre><h2 id="如何删除文件中的’-M’符号？"><a href="#如何删除文件中的’-M’符号？" class="headerlink" title="如何删除文件中的’^M’符号？"></a>如何删除文件中的’^M’符号？</h2><p>其实这个是一个dos版本的换行符，一般是windows相关编辑器引入的。</p><p>不过在VIM中可以手动删除掉。</p><ol><li><p>删除掉指定位置</p><p> :%s/^M//g</p></li></ol><p>‘^M’是在类插入模式下，使用<C-v>+<CR>打印出来的。</p><p>NOTE: <C-V>可以打印不可见字符。</p><ol start="2"><li><p>格式化整个文件，并保存</p><p> :set ff=unix<br> :w<br> :set ff=dos<br> :w</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/vim/vim-grep</title>
      <link href="/2019/11/18/VimNote/vim/vim-grep/"/>
      <url>/2019/11/18/VimNote/vim/vim-grep/</url>
      
        <content type="html"><![CDATA[<h2 id="vim内置搜索功能"><a href="#vim内置搜索功能" class="headerlink" title="vim内置搜索功能"></a>vim内置搜索功能</h2><p>很多插件都提供了这样的功能，不过我们看看vim内置的文件搜索功能：</p><p>帮助文档：</p><pre><code>:help vimgrep</code></pre><p>这里面有很多可以定制的内容，下面仅仅讲述使用grep后端完成搜索。</p><p>常用命令及适用场景：</p><blockquote><p>搜索本文件中的关键字</p></blockquote><pre><code>:vim[grep] /keyword/ % | copen</code></pre><blockquote><p>搜索当前文件所在目录的所有文件中的关键字</p></blockquote><pre><code>:cd %:h 或者已经使用了autochdir 选项:vim[grep] /keyword/ * | copen</code></pre><blockquote><p>递归地搜索指定目录下的所有文件</p></blockquote><pre><code>:vim[grep] /keyword/ ../** | copen:vim[grep] /keyword/ ../ | copen</code></pre><blockquote><p>搜索多个指定目录下的所有文件</p></blockquote><pre><code>:vim[grep] /keyword/ path_01/** | copen:vim[grep] /keyword/ ../path_02/** ../../path_03/* | copen</code></pre><p>不过这个搜索并不是异步的，所以你应该知道你要搜索的内容大致应该在那里。</p><p>使用<code>&lt;C-w&gt; o</code>可以关闭多有除了当前窗口外的其他窗口，自己琢磨吧。</p><p>重新映射一个上下窗口跳转的快捷键可能会很不错：</p><pre><code>nmap &lt;C-J&gt; &lt;C-W&gt;jnmap &lt;C-K&gt; &lt;C-W&gt;k</code></pre><h2 id="vim同时搜索多个关键字"><a href="#vim同时搜索多个关键字" class="headerlink" title="vim同时搜索多个关键字"></a>vim同时搜索多个关键字</h2><p>以‘或’的形式，同时搜索多个关键字：</p><pre><code>/\vword01|word02/word01\|word02</code></pre><p>以‘与’的形式，同时搜索多个关键字：(使用类似perl形式的正则表达式)</p><pre><code>/\vword01(some pattern)word02</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/python/python-operate-path-methods</title>
      <link href="/2019/11/18/VimNote/python/python-operate-path-methods/"/>
      <url>/2019/11/18/VimNote/python/python-operate-path-methods/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-常见的几种处理路径问题"><a href="#Python-常见的几种处理路径问题" class="headerlink" title="Python 常见的几种处理路径问题"></a>Python 常见的几种处理路径问题</h1><p>Python 虽然很方便，文档资料也是随处可见，本文内容也不是创新的内容，只是希望简单的总结一下编程中常见的处理路径的问题，希望对大家有所帮助。</p><h2 id="如何获得当前文件的路径"><a href="#如何获得当前文件的路径" class="headerlink" title="如何获得当前文件的路径"></a>如何获得当前文件的路径</h2><p>一般这里指的路径分两种，一个是绝对路径，另一个是相对路径。</p><p>那么我们简单先介绍下几种路径的获得方法，最后看看例子。</p><blockquote><p><em>__file__</em></p></blockquote><p>这是python内置的变量，表示包含文件名称的路径，可以肯定的是，<br>这个变量中一定包含文件名称，至于路径因执行 python 的方法不同而不同。</p><blockquote><p><em>os.getcwd()</em></p></blockquote><p>这是os模块的函数，不是os.path。</p><p>它返回的是平台支持的文件路径，并不包含文件名称，而是路径的绝对值。</p><blockquote><p><em>os.path.realpath(__file__)</em></p></blockquote><p>返回指定文件名的规范路径，消除路径中遇到的任何符号链接,<br>一般大部分系统都支持它。</p><blockquote><p><em>os.path.abspath(__file__)</em></p></blockquote><p>返回路径名路径的标准化绝对化版本。在大多数平台上，这等效于按如下方式：<br>os.path.normpath(os.path.join(os.getcwd(), __file__)) 等价于 os.path.abspath(__file__)。</p><blockquote><p><em>sys.path[0]</em></p></blockquote><p>sys.argv[0]|获得模块所在的路径，一般由系统决定是否是全名。</p><p>前面介绍了5种方法，我们一起看看在不同条件下的输出情况：</p><p>文件内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python3</span></span><br><span class="line"><span class="comment">#filename: filename_test.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os,sys</span><br><span class="line"></span><br><span class="line">print(<span class="string">"filename:[__file__] &gt;"</span>, __file__)</span><br><span class="line">print(<span class="string">"filename:[os.getcwd()] &gt;"</span>, os.getcwd())</span><br><span class="line">print(<span class="string">"filename:[os.path.realpath(__file__)] &gt;"</span>,os.path.realpath(__file__))</span><br><span class="line">print(<span class="string">"filename:[os.path.abspath(__file__)] &gt;"</span>, os.path.abspath(__file__))</span><br><span class="line">print(<span class="string">"filename:[sys.path[0]] &gt;"</span>, sys.path[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>输出内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[cmd] &gt; python filename_test.py</span><br><span class="line">filename:[__file__] &gt; filename_test.py</span><br><span class="line">filename:[os.getcwd()] &gt; /home/rex/C_LD/common_Makefile/scirpts</span><br><span class="line">filename:[os.path.realpath(__file__)] &gt; /home/rex/C_LD/common_Makefile/scirpts/filename_test.py</span><br><span class="line">filename:[os.path.abspath(__file__)] &gt; /home/rex/C_LD/common_Makefile/scirpts/filename_test.py</span><br><span class="line">filename:[sys.path[0]] &gt; /home/rex/C_LD/common_Makefile/scirpts</span><br><span class="line"></span><br><span class="line">[cmd] &gt; python ../scirpts/filename_test.py</span><br><span class="line">filename:[__file__] &gt; ../scirpts/filename_test.py</span><br><span class="line">filename:[os.getcwd()] &gt; /home/rex/C_LD/common_Makefile/scirpts</span><br><span class="line">filename:[os.path.realpath(__file__)] &gt; /home/rex/C_LD/common_Makefile/scirpts/filename_test.py</span><br><span class="line">filename:[os.path.abspath(__file__)] &gt; /home/rex/C_LD/common_Makefile/scirpts/filename_test.py</span><br><span class="line">filename:[sys.path[0]] &gt; /home/rex/C_LD/common_Makefile/scirpts</span><br><span class="line"></span><br><span class="line">[cmd] &gt; ./filename_test.py</span><br><span class="line">filename:[__file__] &gt; ./filename_test.py</span><br><span class="line">filename:[os.getcwd()] &gt; /home/rex/C_LD/common_Makefile/scirpts</span><br><span class="line">filename:[os.path.realpath(__file__)] &gt; /home/rex/C_LD/common_Makefile/scirpts/filename_test.py</span><br><span class="line">filename:[os.path.abspath(__file__)] &gt; /home/rex/C_LD/common_Makefile/scirpts/filename_test.py</span><br><span class="line">filename:[sys.path[0]] &gt; /home/rex/C_LD/common_Makefile/scirpts</span><br></pre></td></tr></table></figure><p>一般获得当前模块或者你称之为脚本文件的绝对路径，使用:</p><pre><code>os.path.dirname(os.path.realpath(__file__))</code></pre><p>看到了说出应该差不多就明白了，不过具体的细节请查看<a href="https://docs.python.org/3.8/library/os.path.html" target="_blank" rel="noopener">官方文档</a>。<br>当然看看源码也是有好处的，如果你有时间的话。</p><h2 id="其他常用的路径操作手法"><a href="#其他常用的路径操作手法" class="headerlink" title="其他常用的路径操作手法"></a>其他常用的路径操作手法</h2><blockquote><p>获得文件名称</p></blockquote><pre><code>os.path.basename(__file__)</code></pre><blockquote><p>获得文件名称和绝对路径</p></blockquote><pre><code>os.path.split(os.path.realpath(__file__))</code></pre><p>其他的路径裁剪，都可以使用本文提供的方法，<br>加上适当的<code>os.path</code>模块中的处理函数，来满足你的要求。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/misc/markdown-use-local-image</title>
      <link href="/2019/11/18/VimNote/misc/markdown-use-local-image/"/>
      <url>/2019/11/18/VimNote/misc/markdown-use-local-image/</url>
      
        <content type="html"><![CDATA[<h2 id="Markdown中使用本地图片"><a href="#Markdown中使用本地图片" class="headerlink" title="Markdown中使用本地图片"></a>Markdown中使用本地图片</h2><p>Markdown 记录笔记已经是很常见的操作了，那笔记中有图片怎么办？</p><p>本节主要讲述引用本地图片的方法，其实很简单：</p><pre><code>![no resource](images/hello.png)![no resource](../images/hello.png)![no resource](hello.png)</code></pre><blockquote><p>“no resource” 在没有或者无法加载图片的时候显示的内容<br>样例中的圆口括号中是相对路径的访问方式</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/C/c-strange</title>
      <link href="/2019/11/18/VimNote/C/c-strange/"/>
      <url>/2019/11/18/VimNote/C/c-strange/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言中的你不一定知道的事"><a href="#C语言中的你不一定知道的事" class="headerlink" title="C语言中的你不一定知道的事"></a>C语言中的你不一定知道的事</h1><p>本文记录C语言中了一些你比较疑惑，或者奇怪的问题。</p><h2 id="printf-“-s-n”-会输出什么？"><a href="#printf-“-s-n”-会输出什么？" class="headerlink" title="printf(“%s\n”);会输出什么？"></a>printf(“%s\n”);会输出什么？</h2><p>这看起来很奇怪不是么？<br>依你来看这就是一个错误的语法呀？</p><p>没错，但也错了，对于GCC编译器来说，这是一个warning。</p><p>我们看个例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> ** argv)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> * test_str = <span class="string">"Hi Bro"</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, test_str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">乱码或者其他不可读的内容</span><br><span class="line">Hi Bro</span><br><span class="line">Hi Bro</span><br></pre></td></tr></table></figure><p>这个例子需要看printf的实现源码才能知道为什么会这样。</p><p>TBD…</p><h2 id="你考虑过C语言符号的可见性么？"><a href="#你考虑过C语言符号的可见性么？" class="headerlink" title="你考虑过C语言符号的可见性么？"></a>你考虑过C语言符号的可见性么？</h2><p>符号的可见性，比如这样</p><pre><code>struct list_head students = { &amp;students, &amp;students };</code></pre><p>关于符号students，为什么可以还没有定义完成就可以被使用？</p><p>其实这可以从编译原理的角度分析：<br>由于students是编译时确定的，不论他是global还是static，已经在image中分配了它的空间，那么它的地址也就确定了，所以我们看到&amp;students可以被使用。</p><h2 id="关于结构体初始化和赋值的一些问题"><a href="#关于结构体初始化和赋值的一些问题" class="headerlink" title="关于结构体初始化和赋值的一些问题"></a>关于结构体初始化和赋值的一些问题</h2><p>初始化结构体操作，像这样：</p><pre><code>struct list_head students = {    .next = &amp;students,    .prev = &amp;students,};</code></pre><p>这没有问题，但像下面这样就会出现问题：</p><pre><code>struct inner {    int id;};struct outter {    struct inner i;};{    struct outter * out = malloc(sizeof(struct outter));    out.i = {100};// 错误的}</code></pre><p>根本原因有两个：</p><ol><li>一个是，结构体只能在初始化的时候赋值，并且不能是malloc分配方式，只能是编译时分配</li><li>另一个是，编译时确定的结构体内存，除了在初始化的时候可以像students那样使用，在之后的赋值动作都不可以这样，只能按照成员变量挨个赋值。</li></ol><p>正确做法是：<br>{<br>    struct outter * out = malloc(sizeof(struct outter));<br>    out.i.id = 100;<br>}</p><h2 id="你使用过-include-“xxx-c”这样的宏么？"><a href="#你使用过-include-“xxx-c”这样的宏么？" class="headerlink" title="你使用过#include “xxx.c”这样的宏么？"></a>你使用过#include “xxx.c”这样的宏么？</h2><p>有时候在编译C语言的时候，你会遇到重复定义的问题，但我想说的并不是普通的重复定义问题。</p><p>我们知道.h和.c只不过是用来给编译器区分的文件类型，本质上都是源文件，只不过人为的把它分成：头文件和源文件</p><p>也就是说我们可以这样使用include</p><pre><code>#include &quot;demo.c&quot; // 就像包含.h文件一样。</code></pre><p>而如果碰到使用这个技巧的源文件的时候，你有故作聪明的在编译的时候加了源文件 demo.o (demo.c),<br>这个时候就会重复定义。</p><p>那么总结的就是，如果看到有.c文件，但是在编译的时候没有在编译源文件列表中添加，那么肯定是使用了本文说的这个技术。</p><h2 id="看C源代码的时候，你有这样的思维定式么？"><a href="#看C源代码的时候，你有这样的思维定式么？" class="headerlink" title="看C源代码的时候，你有这样的思维定式么？"></a>看C源代码的时候，你有这样的思维定式么？</h2><p>在C语言编程的时候，与大多数语言一样，你要在不断的层次转换中知道自己所处的位置，<br>不过我想说的是，很多同学当基础知识不够扎实的时候，就会不知道自己在哪里</p><p>在C语言中</p><pre><code>dev-&gt;mii.dev = dev-&gt;net</code></pre><p>这样简单的一句话说明:<br>符号’-&gt;’表示前面的操作数是指针，并且他结构中有mii成员，而成员mii是是么，需要后面的符号’.’来说明，<br>原来它是一个结构体内嵌成员，它包含dev成员，不过dev是指针还是内嵌成员并不知道。<br>在左值中’-&gt;’符号有同样的解释，不过这里之所以可以这样赋值，就说明前面的’mii.dev’中的dev是个指针，<br>而且’dev-&gt;net’也是一个指针。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VimNote/C/c-macro</title>
      <link href="/2019/11/18/VimNote/C/c-macro/"/>
      <url>/2019/11/18/VimNote/C/c-macro/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言中的宏"><a href="#C语言中的宏" class="headerlink" title="C语言中的宏"></a>C语言中的宏</h1><p>本文主要记录C语言中，与宏相关的奇淫巧技。</p><p>需要声明的一点是，本文按照GCC编译器与C99的标准来说明，如果使用其他编译器，<br>定义宏的方式都可能不同。</p><h2 id="调试Macro的展开"><a href="#调试Macro的展开" class="headerlink" title="调试Macro的展开"></a>调试Macro的展开</h2><p>有时候，你会奇怪为什么宏没有后按照你设计的那样运行，于是你想要找到一个办法显示宏展开后的状态。</p><p>这一节就说明使用GCC编译器如何调试宏的展开。</p><p>其实也是很简单的，你只需要在编译的时候只让build过程执行到预处理为止，<br>对于GCC而言，需要这样传递参数：</p><pre><code>gcc -E -dD obj.c -o extend.txt</code></pre><p>简单解释下参数：</p><blockquote><p>-E: 只做预处理<br>-dD: 输出的内容包括你原始定义的宏<br>-o: 输出重定向</p></blockquote><p>当然，如果你引入了标准库头文件，那么就会有好多的输出内容，请根据你的需要使用关键字过滤就好。</p><p>不过需要注意的是，不同的操作系统可能支持不同的编译器，并且不同的编译器支持的参数可能不同，<br>所以如果你得到的不是你想要的内容，请查看你的编译器文档。</p><h2 id="宏中的可变参数"><a href="#宏中的可变参数" class="headerlink" title="宏中的可变参数"></a>宏中的可变参数</h2><p>GCC编译器支持宏的可变参数，那么就有两个问题：</p><ol><li>如何定义(或者说传递)可变参数</li><li>如何承接可变参数</li></ol><p>简单的例子就是：</p><pre><code>#define MORE_ARGS(...)  __VA_ARGS__</code></pre><p>看起来简单，不过有一些细节需要注意：</p><ol><li>可变参数必须放在最后，这与C语言其他可变参数的规则一致</li><li>需要知道<strong>VA_ARGS</strong>配合其他的符号都干了什么</li></ol><p>看个例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>小结：</p><h2 id="宏中的-‘-’-与-‘-’"><a href="#宏中的-‘-’-与-‘-’" class="headerlink" title="宏中的 ‘#’ 与 ‘##’"></a>宏中的 ‘#’ 与 ‘##’</h2><p>简单的先介绍下这两个符号的相关知识。</p><p>‘#’与’##’都是编译器认识的符号，如果你了解一些编译器的知识，<br>你应该知道，所谓语言就是编译器认识的语言而已，它给你提供一些便于记忆的标识，仅此而已。<br>本文提到的这两个符号是预处理阶段解析的。</p><blockquote><p>‘#’</p></blockquote><p>使用’#’前缀修饰标识符，可以将标识符的字面意思转化为字符串。</p><blockquote><p>‘##’</p></blockquote><p>使用’##’可以将两个标识符合并成一个标识符。<br>需要知道的是，’##’需要两个操作数，不能当前缀或者后缀。<br>不过’##’可以在宏中单独使用，表示如果后面参数没有，去掉前面参数后面的多余的逗号。</p><p>看个简单栗子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* implement part */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TO_STRING(arg) (#arg)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COMBO_DESCRIPTOR(one, another) (one##another)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* test part */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> ** argv)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> * hello_world;</span><br><span class="line">    <span class="keyword">int</span> _combo;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> * hello_world_combo = <span class="string">"hello combo"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[#] to string&gt; got: [%s], wanted:[hello_world]\n"</span>,TO_STRING(hello_world) );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[##] combine two descriptors into one&gt; got: [%s], wanted:[hello combo]\n"</span>,</span><br><span class="line">            COMBO_DESCRIPTOR(hello_world, _combo));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="comment">#] to string&gt; got: [hello_world], wanted:[hello_world]</span></span><br><span class="line">[<span class="comment">##] combine two descriptors into one&gt; got: [hello combo], wanted:[hello combo]</span></span><br></pre></td></tr></table></figure><h3 id="使用’-’与’-’实现动态计算传入宏中的参数个数"><a href="#使用’-’与’-’实现动态计算传入宏中的参数个数" class="headerlink" title="使用’#’与’##’实现动态计算传入宏中的参数个数"></a>使用’#’与’##’实现动态计算传入宏中的参数个数</h3><p>我们在StackOverflow上面看到一个比较有意思的议题，就是如何打印传递的参数个数，进而动态调用不同的函数。</p><p><a href="https://stackoverflow.com/questions/2308243/macro-returning-the-number-of-arguments-it-is-given-in-c" target="_blank" rel="noopener">看看这里的讨论</a></p><p>先上代码看看它的整体实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PP_NARG(...) \</span></span><br><span class="line">    PP_NARG_(__VA_ARGS__,PP_RSEQ_N())</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PP_NARG_(...) \</span></span><br><span class="line">    PP_ARG_N(__VA_ARGS__)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PP_ARG_N( \</span></span><br><span class="line">     _1, _2, _3, _4, _5, _6, _7, _8, _9,_10, \</span><br><span class="line">    _11,_12,_13,_14,_15,_16,_17,_18,_19,_20, \</span><br><span class="line">    _21,_22,_23,_24,_25,_26,_27,_28,_29,_30, \</span><br><span class="line">    _31,_32,_33,_34,_35,_36,_37,_38,_39,_40, \</span><br><span class="line">    _41,_42,_43,_44,_45,_46,_47,_48,_49,_50, \</span><br><span class="line">    _51,_52,_53,_54,_55,_56,_57,_58,_59,_60, \</span><br><span class="line">    _61,_62,_63,  N, ...) N</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PP_RSEQ_N() \</span></span><br><span class="line">    <span class="number">63</span>,<span class="number">62</span>,<span class="number">61</span>,<span class="number">60</span>,                   \</span><br><span class="line">    <span class="number">59</span>,<span class="number">58</span>,<span class="number">57</span>,<span class="number">56</span>,<span class="number">55</span>,<span class="number">54</span>,<span class="number">53</span>,<span class="number">52</span>,<span class="number">51</span>,<span class="number">50</span>, \</span><br><span class="line">    <span class="number">49</span>,<span class="number">48</span>,<span class="number">47</span>,<span class="number">46</span>,<span class="number">45</span>,<span class="number">44</span>,<span class="number">43</span>,<span class="number">42</span>,<span class="number">41</span>,<span class="number">40</span>, \</span><br><span class="line">    <span class="number">39</span>,<span class="number">38</span>,<span class="number">37</span>,<span class="number">36</span>,<span class="number">35</span>,<span class="number">34</span>,<span class="number">33</span>,<span class="number">32</span>,<span class="number">31</span>,<span class="number">30</span>, \</span><br><span class="line">    <span class="number">29</span>,<span class="number">28</span>,<span class="number">27</span>,<span class="number">26</span>,<span class="number">25</span>,<span class="number">24</span>,<span class="number">23</span>,<span class="number">22</span>,<span class="number">21</span>,<span class="number">20</span>, \</span><br><span class="line">    <span class="number">19</span>,<span class="number">18</span>,<span class="number">17</span>,<span class="number">16</span>,<span class="number">15</span>,<span class="number">14</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">10</span>, \</span><br><span class="line">     <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT(pp_narg)     printf(<span class="meta-string">"%2d = %s\n"</span>, pp_narg, # pp_narg)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> lint</span></span><br><span class="line"><span class="comment">/* Prevent over-aggressive optimizers from eliminating ID string */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">char</span> jlss_id_narg_c[];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>  jlss_id_narg_c[] = <span class="string">"@(#)$Id: narg.c,v 1.2 2010/01/24 18:12:05 jleffler Exp $"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* lint */</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> ** argv)</span> </span>&#123;</span><br><span class="line">    PRINT(PP_NARG(A));</span><br><span class="line">    PRINT(PP_NARG(A, B));</span><br><span class="line">    PRINT(PP_NARG(A, B, C));</span><br><span class="line">    PRINT(PP_NARG(A, B, C, D));</span><br><span class="line">    PRINT(PP_NARG(A, B, C, D, E));</span><br><span class="line"></span><br><span class="line">    PRINT(PP_NARG(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="comment">// 1..10</span></span><br><span class="line">                  <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="comment">// 11..20</span></span><br><span class="line">                  <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="comment">// 21..30</span></span><br><span class="line">                  <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="comment">// 31..40</span></span><br><span class="line">                  <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="comment">// 41..50</span></span><br><span class="line">                  <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="comment">// 51..60</span></span><br><span class="line">                  <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    ** If the number of arguments to PP_NARG() is greater than 63, the</span></span><br><span class="line"><span class="comment">    ** 64th argument is returned.  This is well-defined behaviour, but</span></span><br><span class="line"><span class="comment">    ** not exactly what was intended.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    PRINT(PP_NARG(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="comment">// 1..10</span></span><br><span class="line">                  <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="comment">// 11..20</span></span><br><span class="line">                  <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="comment">// 21..30</span></span><br><span class="line">                  <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="comment">// 31..40</span></span><br><span class="line">                  <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="comment">// 41..50</span></span><br><span class="line">                  <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="comment">// 51..60</span></span><br><span class="line">                  <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">-123456789</span>));</span><br><span class="line"></span><br><span class="line">    PRINT(PP_NARG(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="comment">// 1..10</span></span><br><span class="line">                  <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="comment">// 11..20</span></span><br><span class="line">                  <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="comment">// 21..30</span></span><br><span class="line">                  <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="comment">// 31..40</span></span><br><span class="line">                  <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="comment">// 41..50</span></span><br><span class="line">                  <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="comment">// 51..60</span></span><br><span class="line">                  <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">-123456789</span>, <span class="number">-987654321</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看看输出：</p><pre><code>1 = PP_NARG(A)2 = PP_NARG(A, B)3 = PP_NARG(A, B, C)4 = PP_NARG(A, B, C, D)5 = PP_NARG(A, B, C, D, E)63 = PP_NARG(1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3)-123456789 = PP_NARG(1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, -123456789)-123456789 = PP_NARG(1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, -123456789, -987654321)</code></pre><p>我们解释下这个程序的巧妙之处：</p><ol><li>PRINT &gt; 这个宏看起来就很简单，完成两个目的，一个是打印传入的参数个数，另一个是将参数字面意思转成字符串然后显示出来。</li><li>PP_RSEQ_N &gt; 这个宏表示支持的最大的记录参数个数的值，注意它的顺序是倒过来的，为什么呢？因为它会从后往前’吃’，就是这样。</li><li></li></ol><h2 id="编译器提供的常用宏-GCC"><a href="#编译器提供的常用宏-GCC" class="headerlink" title="编译器提供的常用宏(GCC)"></a>编译器提供的常用宏(GCC)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__func__    表示当前宏所在的函数名称字符串</span><br><span class="line">__LINE__    表示当前宏所在的源文件中的行数</span><br><span class="line">__FILE__    表示宏所在源文件的名字</span><br><span class="line">__DATE__    编译的日期（格式&quot;Mmm dd yyyy&quot;）</span><br><span class="line">__TIME__    编译的时间（格式&quot;hh:mm:ss&quot;）</span><br><span class="line">__STDC__    如果编译器接受标准C，那么值为1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>工厂方法模式</title>
      <link href="/2019/10/13/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/10/13/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>大家好，我是“红桃C”。</p><p>这篇文章和大家讨论下工厂方法模式的C语言实现。</p><h2 id="工厂方法模式的概念"><a href="#工厂方法模式的概念" class="headerlink" title="工厂方法模式的概念"></a>工厂方法模式的概念</h2><p>定义创建一类产品对象的工厂接口，将产品对象的实例化从接口推迟到具体的子类工厂。</p><p>通俗来讲，是在设计工厂的时候填加一个中间抽象层，应用都基于该抽象层，既可满足应用源码不变，<br>又可满足随意修改具体工厂的实现细节，这是一个实现‘依赖反转’的好例子。</p><h2 id="工厂方法模式的特点"><a href="#工厂方法模式的特点" class="headerlink" title="工厂方法模式的特点"></a>工厂方法模式的特点</h2><p>特点：</p><ol><li>创建与使用相分离。</li><li>在不修改应用源码的情况下，可以为工厂填加任意新的产品，符合‘开闭原则’。</li><li>应用用户只需要知道产品的名字就可以通过工厂方法得到产品，而无需了解具体的产品生成与实现细节。</li></ol><p>不足：<br>填加新产品类型时候，依旧需要修改代码，提高系统复杂度是难免的。</p><h2 id="工厂方法模式的设计与实现"><a href="#工厂方法模式的设计与实现" class="headerlink" title="工厂方法模式的设计与实现"></a>工厂方法模式的设计与实现</h2><p>本人依旧不喜大量的粘贴源码到blog中，涉及到关键位置时，点到为止即可，具体的源码请查看<a href="https://github.com/OrexZ/C_pattern/tree/master/section_02/factorymethod_01" target="_blank" rel="noopener">这里</a>。</p><h2 id="工厂方法模式的适用场景"><a href="#工厂方法模式的适用场景" class="headerlink" title="工厂方法模式的适用场景"></a>工厂方法模式的适用场景</h2><h2 id="工厂方法模式的扩展"><a href="#工厂方法模式的扩展" class="headerlink" title="工厂方法模式的扩展"></a>工厂方法模式的扩展</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2019/10/09/singleton/"/>
      <url>/2019/10/09/singleton/</url>
      
        <content type="html"><![CDATA[<p>大家好，我是“红桃C”。</p><p>这篇文章和大家讨论下单例模式的C语言实现。</p><p>对于C语言来说，由于并没有完整的类的概念，所以也不会如其他高级语言那样，需要刻意设计单例模式。</p><p>对于设计模式而言，就是一种思想，所以从理论上来讲，并不会限制由什么来实现它。</p><h2 id="单例模式的概念"><a href="#单例模式的概念" class="headerlink" title="单例模式的概念"></a>单例模式的概念</h2><blockquote><p>指一个类只有一个实例，且该类能自行创建这个实例的一种模式。</p></blockquote><p>这是对于有‘类’这样概念的高级语言来说，对于C语言来说，可以这样描述：</p><p>一个指定类型的实例只在内存中存在一个，这个实例的构建可以是编译时静态构建的，<br>也可以是运行时动态创建的，外部用户需要通过统一的访问点来获得它。</p><h2 id="单例模式的特点"><a href="#单例模式的特点" class="headerlink" title="单例模式的特点"></a>单例模式的特点</h2><p>基本上它的特点有三个</p><ol><li>内存中只有一个这样类型或者类的实例</li><li>该实例对象可以静态创建和动态创建</li><li>如果访问该对象，必须通过统一的访问接口</li></ol><h2 id="单例模式的设计与实现"><a href="#单例模式的设计与实现" class="headerlink" title="单例模式的设计与实现"></a>单例模式的设计与实现</h2><p>实现代码托管在github上，可以在<a href="https://github.com/OrexZ/C_pattern" target="_blank" rel="noopener">这里</a>找到所有模式的实现，然后找到你关注的模式，对比本文的分析来理解。</p><p>本文使用‘身份唯一’案例，来说明：<br>在中国，每个人对应一个身份证，并且他的信息是唯一的，<br>在设计该模式的时候，需要知道两个对象，<br>一个是个人，也就是身份信息（被访问者）<br>另一个是民政局，也就是访问个人信息的机构（访问者）</p><p>代码案例实现民政局查找个人身份。</p><p>这里还是再强调下，对于C语言来说内存的分配需要自己来实现，所以也就有了，</p><ol><li>编译时，分配常驻内存的实例，对应饿汉单例模式</li><li>运行时，使用malloc动态分配实例，对应懒汉单例模式</li></ol><p>懒汉单例模式，顾名思义，就是在需要它的时候才去创建实例，实现源码在<a href="https://github.com/OrexZ/C_pattern/tree/master/section_01/singleton_02" target="_blank" rel="noopener">这里</a>。<br>饿汉单例模式，说的是在编译构建程序时就开始创建实例，实现源码在<a href="https://github.com/OrexZ/C_pattern/tree/master/section_01/singleton_01" target="_blank" rel="noopener">这里</a>。</p><h2 id="单例模式的适用场景"><a href="#单例模式的适用场景" class="headerlink" title="单例模式的适用场景"></a>单例模式的适用场景</h2><p>如果说到设计模式的适用场景，一般指它的优点或者强项，毕竟只有擅长的领域才是适用场景。</p><p>优点：<br>占用内存少<br>访问效率高<br>频繁实例化与销毁时效率提高明显</p><p>场景：</p><ol><li>某些场景中，需要用到的实例是唯一的，即只要求生成一个对象的时候，如一个公交车的司机等。</li><li>当对象实例需要被共享的场合。由于单例模式只允许创建一个对象，共享该对象可以节省内存，并加快对象访问速度。如数据库的连接池等。</li><li>当某类型需要频繁实例化，而创建的对象又频繁被销毁的时候，如多线程的线程池、网络连接池等。</li></ol><p>实际应用的例子：<br>在计算机系统中，还有 Windows 的回收站，多线程中的线程池、显卡的驱动程序对象、数据库的连接池、应用程序中的对话框、系统中的缓存等常常被设计成单例。</p><h2 id="单例模式的扩展"><a href="#单例模式的扩展" class="headerlink" title="单例模式的扩展"></a>单例模式的扩展</h2><p>一般单例模式可以扩展为有限个数的多例模式，这个其实很容易扩展，按照本文的例子，自己尝试下吧。</p>]]></content>
      
      
      <categories>
          
          <category> pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> singleton </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>巧字决 - [ALG-ID-0002]</title>
      <link href="/2019/09/02/algorithm-ALG-ID-0002/"/>
      <url>/2019/09/02/algorithm-ALG-ID-0002/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>根据不同的需求实现’栈’数据结构，</p><ol><li>使用静态数组</li><li>使用动态数组</li><li>使用链表</li></ol><h2 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h2><h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><p>‘’栈’结构对于一个程序员来说并不陌生，也是需要掌握的基本数据结构，特别是对于那些搞低层的家伙们:)</p><p>栈的操作也比较简单，无非就是分配内存（无论你有什么方法），提供push，pop和栈空、栈满操作。</p><p>我们这次实现一个通用的小架构，使用C语言实现面向对象来看看。</p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>巧字决 - [ALG-ID-0001]</title>
      <link href="/2019/09/02/algorithm-ALG-ID-0001/"/>
      <url>/2019/09/02/algorithm-ALG-ID-0001/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>将字符数组中的’空格’符号转换成’％20’,字符数组长度足够，可将结果输出到原数组或者新数组。</p><h2 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h2><p>实现方法一：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count_of_space</span><span class="params">(<span class="keyword">char</span> * in)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i, num_space=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="built_in">strlen</span>(in); i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (in[i] == <span class="string">' '</span>)&#123;</span><br><span class="line">      num_space += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> num_space;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REPLACE_LEN 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REPLACE_ITEM <span class="meta-string">"%20"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fill_space</span><span class="params">(<span class="keyword">char</span> * str, <span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">char</span> * c = REPLACE_ITEM;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="built_in">strlen</span>(REPLACE_ITEM); i++)&#123;</span><br><span class="line">    str[pos--] = c[<span class="built_in">strlen</span>(REPLACE_ITEM) - i - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> REPLACE_LEN;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> POS(current_pos) (current_pos - 1)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">replace_space</span><span class="params">(<span class="keyword">char</span> * in, <span class="keyword">char</span> * out, <span class="keyword">unsigned</span> <span class="built_in">size</span>)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i, len =<span class="built_in">strlen</span>(in);</span><br><span class="line">  <span class="keyword">int</span> num_space = count_of_space(in);</span><br><span class="line">  <span class="keyword">int</span> len_with_spec = len + num_space * <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">int</span> iterc = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (len + <span class="number">1</span> &gt;= <span class="built_in">size</span> || len_with_spec + <span class="number">1</span> &gt; <span class="built_in">size</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (in[POS(len-i)] == <span class="string">' '</span>)&#123;</span><br><span class="line">      iterc += fill_space(out, POS(len_with_spec-i) - iterc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      out[POS(len_with_spec-i) - iterc] = in[POS(len-i)];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  out[len_with_spec + <span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100</span></span><br><span class="line">  <span class="keyword">char</span> buf[BUF_SIZE] = <span class="string">"Hello, My name is [wakaka] !"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n[IN STRING] %s\n"</span>, buf);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (replace_space(buf, buf, BUF_SIZE) != <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Replace space FAILD.\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n[OUT STRING] %s\n"</span>, buf);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不使用标准库的实现二：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">get_char_num</span><span class="params">(<span class="keyword">char</span> *in, <span class="keyword">char</span> ops)</span></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> i = <span class="number">0</span>, len = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (ops == <span class="string">'\0'</span>)&#123;</span><br><span class="line">    <span class="keyword">while</span> (*(in+i) != <span class="string">'\0'</span>)&#123;</span><br><span class="line">      i++;</span><br><span class="line">      len++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (*(in+i) != <span class="string">'\0'</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span> (*(in + i) == ops)&#123;</span><br><span class="line">        len++;</span><br><span class="line">      &#125;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WANTED_STR <span class="meta-string">"%20"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> POS(len) (len - 1)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">replace_space</span><span class="params">(<span class="keyword">char</span> *in, <span class="keyword">char</span> *out, <span class="keyword">unsigned</span> <span class="built_in">size</span>)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i, num_space = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> len = <span class="number">0</span>, len_with_space = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> wanted_str_len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  len = get_char_num(in, <span class="string">'\0'</span>);</span><br><span class="line">  num_space = get_char_num(in, <span class="string">' '</span>);</span><br><span class="line">  wanted_str_len = get_char_num(WANTED_STR, <span class="string">'\0'</span>);</span><br><span class="line">  len_with_space = len + num_space * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">size</span> &lt; len_with_space + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  out[len_with_space + <span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (len &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (in[POS(len)] == <span class="string">' '</span>)&#123;</span><br><span class="line">      <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt; wanted_str_len; i++)&#123;</span><br><span class="line">        out[POS(len_with_space--)] = WANTED_STR[POS(wanted_str_len)-i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      out[POS(len_with_space--)] = in[POS(len)];</span><br><span class="line">    &#125;</span><br><span class="line">    len--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100</span></span><br><span class="line">  <span class="keyword">char</span> buf[BUF_SIZE] = <span class="string">"Darling, I am so hoooooot .. .. !"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"IN STRING: [%s]\n"</span>, buf);</span><br><span class="line">  <span class="keyword">if</span> (replace_space(buf, buf, BUF_SIZE) != <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Replace space FAIL."</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"OUT STRING: [%s]\n"</span>, buf);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>谈谈python处理excel的那些事</title>
      <link href="/2019/08/13/VimNote/python/py_deal_excel_on_windows/"/>
      <url>/2019/08/13/VimNote/python/py_deal_excel_on_windows/</url>
      
        <content type="html"><![CDATA[<h2 id="谈谈excel"><a href="#谈谈excel" class="headerlink" title="谈谈excel"></a>谈谈excel</h2><p>起初我是不了解excel的，其实就现在来讲，也只是观摩，甚至谈不上入门。</p><p>不过换句话讲，excel是做数据友好显示和批量处理的工具，也许我们只需要会一些简单的功能就够了，往往也正是如此。</p><p>笔者工作环境一般在linux下，偶尔切到windows下操作几下，不过最近帮忙开发一些常用的项目工具，涉及到了excel的自动化批处理等问题，所以有感而发，写那么一点自己的体会。</p><h2 id="windows下使用win32com处理excel"><a href="#windows下使用win32com处理excel" class="headerlink" title="windows下使用win32com处理excel"></a>windows下使用win32com处理excel</h2><p>需要知道的是，win32com模块是另外一个仓库的一部分功能，他们可能是：</p><ol><li>在python2下，是</li><li>在python3下，是</li></ol><p>所以，如果你安装了python，可以使用相应版本的pip来安装你想要的仓库，这很简单，</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>windows下安裝不同版本的python</title>
      <link href="/2019/08/12/VimNote/python/install_diff_python3_on_windows/"/>
      <url>/2019/08/12/VimNote/python/install_diff_python3_on_windows/</url>
      
        <content type="html"><![CDATA[<h2 id="什么叫不同版本的python？"><a href="#什么叫不同版本的python？" class="headerlink" title="什么叫不同版本的python？"></a>什么叫不同版本的python？</h2><p>一般对于开发人员来说，工具的版本并不陌生。<br>python 大家或者熟悉或者听说过，用的人自然懂，这里也就不过多介绍了。<br>不过，对于linux的开发人员来说，安装不同版本的python轻而易举，经常和命令行打交道的他们可以分分钟完成不同版本的配置。<br>对于windows开发人员也不例外，他们一样熟悉着自己的工作环境，并且熟练的掌握着吃饭的家伙(偷笑)。</p><p>本文主要是给那些不太熟悉windows操作系统，且想要开发的用户，用以来解决一些在windows开发环境上的疑惑。</p><p>python发展历史我不想追究，随便使用个搜索引擎都能轻松了解到，这里只告诉您，python有两个重要的版本：</p><ol><li>python2 历史版本，至今还有很多大项目在用，所以还没有废弃，python社区还在做兼容性维护</li><li>python3 革新版本，从python2跃迁而来，添加了很多新的特性，有些基础内容已经从根本上改变</li></ol><h2 id="在windows上安装不同版本python的方法"><a href="#在windows上安装不同版本python的方法" class="headerlink" title="在windows上安装不同版本python的方法"></a>在windows上安装不同版本python的方法</h2><p>其实在windows上，安装不同版本python，笔者感觉主要有三种方法：</p><ol><li>通过<a href="https://www.python.org/" target="_blank" rel="noopener">python 官网</a>,下载不同版本的python，然后通过安装配置，最后做一些手脚就可以顺利完成配置。</li><li>通过 <a href="https://www.anaconda.com/" target="_blank" rel="noopener">anaconda</a>,配置你想要的版本，它自带版本管理系统，可以方便帮助隔离不同的python版本环境。</li><li>通过python第三方版本管理库，完成python版本的隔离控制</li></ol><p>本文主要介绍在windows上使用前两种方法。</p><h2 id="官网下载，安装自定义"><a href="#官网下载，安装自定义" class="headerlink" title="官网下载，安装自定义"></a>官网下载，安装自定义</h2><h3 id="下载python的不同版本"><a href="#下载python的不同版本" class="headerlink" title="下载python的不同版本"></a>下载python的不同版本</h3><p><a href="https://www.python.org/" target="_blank" rel="noopener">python 官网</a>中有两个版本的下载地址，仔细找找很容以找到。<br>本文实例以图示版本为例，如果安装其他版本，你应该知道怎么找。</p><p>这里windows用户喜欢下载安装包，方便快捷的下载安装。</p><p>步骤如图：<br>step.1 找到官网下载地址</p><p><img src="/images/install_diff_python3_on_windows/01.png" alt="01"></p><p>step.2选择你需要的安装包下载它<br><img src="/images/install_diff_python3_on_windows/02.png" alt="02"></p><p>step.3双击安装，你懂的<br><img src="/images/install_diff_python3_on_windows/03.png" alt="03"></p><h3 id="定制化自己的python版本环境并安装"><a href="#定制化自己的python版本环境并安装" class="headerlink" title="定制化自己的python版本环境并安装"></a>定制化自己的python版本环境并安装</h3><p>本人比较喜欢干净的工作环境，所以一般安装的python也是自己使用，并不影响其他开发者。<br>你需要对自己安装的版本及路径了如指掌，后续做一些修改的时候也方便一些。</p><p>以python3安装为例，python2雷同。<br>图示步骤如下：</p><p>step.1 选择工具自动添加环境</p><p><img src="/images/install_diff_python3_on_windows/04.png" alt="04"></p><p>step.2 手动选择你想要安装的目录<br><img src="/images/install_diff_python3_on_windows/05.png" alt="05"></p><p>step.3 安装进行中<br><img src="/images/install_diff_python3_on_windows/05.png" alt="06"></p><p>安装过程中，可能会提示兼容以往的 DOS 最大路径字符长度限制，请 enable 。</p><p>安装完成后配置环境路径，如图：</p><p><img src="/images/install_diff_python3_on_windows/07.png" alt="07"></p><h3 id="为了使用命令行，修改以做兼容"><a href="#为了使用命令行，修改以做兼容" class="headerlink" title="为了使用命令行，修改以做兼容"></a>为了使用命令行，修改以做兼容</h3><p>修改python2安装路径下的执行文件为：python2.exe<br>修改python3安装路径下的执行文件为：python3.exe</p><p>修改执行入口程序的名字，操作类似如下：<br><img src="/images/install_diff_python3_on_windows/08.png" alt="08"></p><p>当然，这里你可以复制原来的可执行文件然后修改名字也是可以的，不过<code>python</code>这命令在cmd中按照<code>PATH</code>配置顺序执行的，所以最好指定python版本。</p><p>这里有一个小技巧，如果你想要<code>python</code>命令，默认使用哪一个版本，那就保留该版本的两个可执行文件，比如：<br>对于python3来说，保留python.exe和python3.exe，但是python2中的可执行文件只保留python2.exe。<br>这样，我们得到了三个命令，你可以自由切换：</p><ol><li>python – 表示python3</li><li>python3 – 表示python3</li><li>python2 – 表示python2</li></ol><p>重启命令行，操作验证：<br><img src="/images/install_diff_python3_on_windows/09.png" alt="09"></p><h3 id="不同版本的pip管理器的使用"><a href="#不同版本的pip管理器的使用" class="headerlink" title="不同版本的pip管理器的使用"></a>不同版本的pip管理器的使用</h3><p>正常来说，pip在笔者下载的这两个版本中都有默认支持了。<br>对于老版本的python2如果没有，可以简单的在搜索引擎上找到安装python2的pip的解决方法。</p><p>由于之前我们修改了python.exe以支持想要的版本区分，不过也使得对应版本的pip.exe无法使用了。</p><p>这里提供简单的操作方法：</p><pre><code>C:\Users\imcat&gt;python2 -m pip --versionpip 18.1 from C:\Python2.7\lib\site-packages\pip (python 2.7)C:\Users\imcat&gt;python3 -m pip --versionpip 19.0.3 from C:\python3.7\lib\site-packages\pip (python 3.7)</code></pre><p>结果类似这样：<br><img src="/images/install_diff_python3_on_windows/10.png" alt="10"></p><p>这样，你就可以使用pip安装你想要的库到指定版本路径中。</p><h2 id="使用anaconda自带以的版本控制"><a href="#使用anaconda自带以的版本控制" class="headerlink" title="使用anaconda自带以的版本控制"></a>使用anaconda自带以的版本控制</h2><p>anaconda 是一个比较有意思的开源项目，它对于python的版本控制非常到位，并且内置了很多有用的功能。</p><p>由于它的强大，省去了我们的配置时间，接下来简单看看如何使用 anaconda。</p><h3 id="anaconda-的下载与安装"><a href="#anaconda-的下载与安装" class="headerlink" title="anaconda 的下载与安装"></a>anaconda 的下载与安装</h3><p>去<a href="https://www.anaconda.com/" target="_blank" rel="noopener">anaconda 的官网</a>下载下来python3版本，其实我们只需要下载python3版本，也就是比较前卫的版本。<br>之所以这样，是因为conda管理器可以帮助我们自动下载python2的内容，而且也方便切换。</p><p>下载安装步骤如图：</p><p>step.1 找到官网下载地址并下载<br><img src="/images/install_diff_python3_on_windows/11.png" alt="11"></p><p>step.2 双击安装<br><img src="/images/install_diff_python3_on_windows/12.png" alt="12"></p><p>step.3 选择一个独立的路径<br><img src="/images/install_diff_python3_on_windows/13.png" alt="13"></p><p>step.4 前面安装过默认的python，因为anaconda是独立的环境，所以去掉图示勾选<br><img src="/images/install_diff_python3_on_windows/14.png" alt="14"></p><p>step.5安装过程有些枯燥，由于不是mini版本，需要一些时间，去喝点水吧<br><img src="/images/install_diff_python3_on_windows/15.png" alt="15"></p><p>由于默认安装了一些应用，所以安装时间稍微长一些，当然你可以下载它的mini版本，这里不做赘述了。</p><p>安装完成后，验证方法只需查看开始菜单中的anaconda即可，如图：<br><img src="/images/install_diff_python3_on_windows/16.png" alt="16"></p><p>如果你喜欢gui，那就启动gui，笔者一般喜欢使用命令行，所以使用shell接口就足够了，本文也主要介绍shell接口的相关配置，也就是<code>anaconda prompt</code>。</p><p>运行效果如图：<br><img src="/images/install_diff_python3_on_windows/17.png" alt="17"></p><h3 id="conda-命令的简单使用"><a href="#conda-命令的简单使用" class="headerlink" title="conda 命令的简单使用"></a>conda 命令的简单使用</h3><p>anaconda 的管理器接口是 conda 应用，从名字看就很容易理解。<br>这里列出一些常用的 conda 管理器的常用命令，如果想要更详细的内容，可以自行搜索官网文档。</p><p>以下命令都是在<code>anaconda</code>的shell中完成的，也就是<code>anaconda prompt</code></p><ul><li>帮助:<br>conda -h</li><li>查看conda版本:<br>conda -V</li><li>查看虚拟环境列表:<br>conda env list 或 conda info -e 或 conda info –envs</li><li>创建python虚拟环境:<br> conda create -n your_env_name python=X.X（2.7、3.6等)<br> your_env_name &gt;&gt; 就是你的环境名字，识别号而已<br> python=X.X &gt;&gt; 就是你要安装的虚拟环境使用的真实环境版本</li><li>向指定虚拟环境中安装额外的库:<br>conda install -n your_env_name [package]<br>其实在虚拟环境中，通过正常的安装流程也是一样可以办到的，当然需要你切到虚拟环境下。</li><li>开启虚拟环境:<br>activate your_env_name</li><li>关闭虚拟环境:<br>deactivate</li><li>删除虚拟环境:<br>conda remove -n your_env_name(虚拟环境名称) –all</li><li>删除环境中的某个包:<br>conda remove –name your_env_name package_name</li></ul><h3 id="简单操作与验证"><a href="#简单操作与验证" class="headerlink" title="简单操作与验证"></a>简单操作与验证</h3><p>安装python2</p><pre><code>conda create -n python27 python=2.7</code></pre><p>查看安装好的虚拟环境</p><pre><code>conda env list</code></pre><p>切换到指定的虚拟环境</p><pre><code>activate python27</code></pre><p>验证版本</p><pre><code>python --version</code></pre><p>安装卸载包</p><pre><code>python -m pip install openpyxlpython -m pip uninstall openpyxl</code></pre><p>退出环境</p><pre><code>deactive</code></pre><p>简单、直接、粗暴，很符合有强迫症的人士。</p><h2 id="两种方法的利与弊"><a href="#两种方法的利与弊" class="headerlink" title="两种方法的利与弊"></a>两种方法的利与弊</h2><p>其实就方法而言，并没有什么高低之分，只不过针对应用场景来说，有的方法稍微有点别手而已。</p><p>比如，笔者在工作中就遇到的情况，这里简单描述下：<br>项目同时使用python2和python3的内容，因为一早就有的工具，需要你去继承使用；<br>当然有些同学会说，自己可以将python2的项目修改成python3兼容的，不过这需要花费很多成本，<br>一般在项目中，除非逼不得已，一般都不会这么做，而是一起使用python3和python2，这个时候，<br>貌似纯粹的虚拟环境就有点劣势，所以配置干净的系统环境，也就是使用第一种方法，就成了符合当前策略的主要方案。</p><p>而一般一个项目的开发可能支持不同的python版本，设计之初，就可能考虑到不同版本的向后兼容性，<br>需要不停的切换版本验证，这种时候，虚拟环境的特长就显露出来了。</p><p>当然，这也是笔者个人所思，百家想法，各有观点，这里就不过多的讨论了。</p><p>好了，终于在windows上，不断的卸载和安装，完成了这篇文章。<br>^_^ 祝贺下(拍手)。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Lua</title>
      <link href="/2019/07/21/VimNote/backup/lua/"/>
      <url>/2019/07/21/VimNote/backup/lua/</url>
      
        <content type="html"><![CDATA[<p>本文主要介绍关于Lua语言的使用技巧和设计细节。</p><h2 id="Lua如何安装？"><a href="#Lua如何安装？" class="headerlink" title="Lua如何安装？"></a>Lua如何安装？</h2><p>Lua语言的官方网站：<a href="https://www.lua.org/" target="_blank" rel="noopener">https://www.lua.org/</a></p><p>安装的步骤简记如下：<br>编译安装时需要注意依赖的库 <em>readline</em></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">if</span> on Centos</span><br><span class="line">yum install  readline-devel</span><br><span class="line"></span><br><span class="line"># <span class="keyword">if</span> on Ubuntu <span class="keyword">or</span> Debian</span><br><span class="line">apt-get install libreadline-dev</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">curl -R -O http://www.lua.org/ftp/lua<span class="number">-5.3</span><span class="number">.5</span>.tar.gz</span><br><span class="line">tar zxf lua<span class="number">-5.3</span><span class="number">.5</span>.tar.gz</span><br><span class="line">cd lua<span class="number">-5.3</span><span class="number">.5</span></span><br><span class="line">make linux test</span><br></pre></td></tr></table></figure><h2 id="Lua-是否可以交互？"><a href="#Lua-是否可以交互？" class="headerlink" title="Lua 是否可以交互？"></a>Lua 是否可以交互？</h2><p>使用过lua的程序员可能都清楚，lua是一门解释型语言，提供解释器，并且提供交互式编程接口。<br>你只需要使用简单的敲击lua就可以进入交互模式。</p><h2 id="如何修改Lua交互模式的提示符？"><a href="#如何修改Lua交互模式的提示符？" class="headerlink" title="如何修改Lua交互模式的提示符？"></a>如何修改Lua交互模式的提示符？</h2><p>修改lua交互模式的提示符，可以简单的定义一个全局变量来进行处理：</p><p>第一种：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lua -e <span class="string">"_PROMPT=' lua&gt; '"</span> -i</span><br></pre></td></tr></table></figure><p>第二种：<br>写一个lua文件，内容如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- filename: prompt.lua</span></span><br><span class="line">_PROMPT = <span class="string">' lua&gt; '</span>_</span><br></pre></td></tr></table></figure><p>然后运行文件并切到交互式模式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lua -i prompt.lua</span><br></pre></td></tr></table></figure><p>第三种：<br>使用lua默认的环境变量进行前置代码运行，这个环境变量是解释器所认识的内容，这里先不用关心。<br>环境变量为 LUA_INIT, 具体步骤如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">export</span> LUA_INIT=<span class="string">"_PROMPT=' lua&gt; '"</span>; lua -i) <span class="comment">#注意这里的分号，需要明确-i参数的所属，否则保错,外面的括号是shell隔离环境的好办法</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LUA_INIT=<span class="string">"@/path/to/prompt.lua"</span></span><br><span class="line">lua -i</span><br></pre></td></tr></table></figure><p>撤销动作如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unset</span> LUA_INIT</span><br></pre></td></tr></table></figure><h2 id="Lua中打印环境arg表的一些怪异现象？"><a href="#Lua中打印环境arg表的一些怪异现象？" class="headerlink" title="Lua中打印环境arg表的一些怪异现象？"></a>Lua中打印环境arg表的一些怪异现象？</h2><p>lua默认的命令行参数会存储在arg table中，而使用这个表的时候往往新手会有点混乱，实例如下：<br>测试程序：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- filename: arg.lua</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"arg: "</span>, <span class="built_in">arg</span>)</span><br><span class="line">pl = <span class="built_in">string</span>.<span class="built_in">rep</span>(<span class="string">'-'</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show_all_args_v1</span><span class="params">(a)</span></span></span><br><span class="line">    <span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(a) <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"[#"</span>,i,<span class="string">"]:"</span>,v)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show_all_args_v2</span><span class="params">(a)</span></span></span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(a) <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"[#"</span>,k,<span class="string">"]:"</span>,v)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pl,<span class="string">"may be you saw as below"</span>,pl)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"total number of arg:"</span>, #<span class="built_in">arg</span>)</span><br><span class="line">show_all_args_v1(<span class="built_in">arg</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pl,<span class="string">"real arg as below"</span>,pl)</span><br><span class="line"><span class="keyword">local</span> <span class="built_in">len</span> = <span class="function"><span class="keyword">function</span> <span class="params">(a)</span></span> <span class="keyword">local</span> i=<span class="number">0</span> <span class="keyword">for</span> _,_ <span class="keyword">in</span> <span class="built_in">pairs</span>(a) <span class="keyword">do</span> i=i+<span class="number">1</span> <span class="keyword">end</span> <span class="keyword">return</span> i <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">show_all_args_v2(<span class="built_in">arg</span>)</span><br></pre></td></tr></table></figure><p>测试结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  lua-learning git:(master) lua ./arg.lua a b c</span><br><span class="line">arg: table: 0x20199f0</span><br><span class="line">--------------------may be you saw as below--------------------</span><br><span class="line">total number of arg:3</span><br><span class="line">[<span class="comment">#1]:a</span></span><br><span class="line">[<span class="comment">#2]:b</span></span><br><span class="line">[<span class="comment">#3]:c</span></span><br><span class="line">--------------------real arg as below--------------------</span><br><span class="line">total number of arg:5</span><br><span class="line">[<span class="comment">#1]:a</span></span><br><span class="line">[<span class="comment">#2]:b</span></span><br><span class="line">[<span class="comment">#3]:c</span></span><br><span class="line">[<span class="comment">#0]:./arg.lua</span></span><br><span class="line">[<span class="comment">#-1]:lua</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(base) ➜  lua-learning git:(master) lua -e <span class="string">"just_for_test=100"</span> ./arg.lua a b c </span><br><span class="line">arg: table: 0xc149f0</span><br><span class="line">--------------------may be you saw as below--------------------</span><br><span class="line">total number of arg:3</span><br><span class="line">[<span class="comment">#1]:a</span></span><br><span class="line">[<span class="comment">#2]:b</span></span><br><span class="line">[<span class="comment">#3]:c</span></span><br><span class="line">--------------------real arg as below--------------------</span><br><span class="line">total number of arg:7</span><br><span class="line">[<span class="comment">#1]:a</span></span><br><span class="line">[<span class="comment">#2]:b</span></span><br><span class="line">[<span class="comment">#3]:c</span></span><br><span class="line">[<span class="comment">#0]:./arg.lua</span></span><br><span class="line">[<span class="comment">#-3]:lua</span></span><br><span class="line">[<span class="comment">#-2]:-e</span></span><br><span class="line">[<span class="comment">#-1]:just_for_test=100</span></span><br></pre></td></tr></table></figure><p>解释：<br>一般看到上面的程序和验证结果就已经了解了大概的端倪，这里做下简单的分析。</p><ol><li>首先lua中的table是一个符合型的结构，他可以存储所谓的数组或者字典(关联数组)。</li><li>lua解释器会把所有的命令行参数全部收集起来放在arg table中。</li><li>lua中table其实是关联数组，也就是hash速查表的实现方式，之所以可以使用数组，那时因为table认识1,2,3这样的key，并且明白如何解析。</li><li>arg table中参数是按照‘顺序’排列的，并且看起来可以按照数组的形式引用它们。</li><li>ipairs和pairs的区别也很明显，一个计算从数字1开始的能够按照数组样式索引的函数：ipairs，另一个是索引标准hashtable的key:value方法：pairs</li><li>arg[0]表示脚本名字，也是一个看似的分界线，并且复数的索引也是有规律可寻的。</li></ol><h2 id="用在命令行参数解析时的三个点-…-？"><a href="#用在命令行参数解析时的三个点-…-？" class="headerlink" title="用在命令行参数解析时的三个点(…)？"></a>用在命令行参数解析时的三个点(…)？</h2><p>lua提供一种可变参数的支持，和C语言很像，在命令行传入参数的时候也可以使用它来替代arg table，不过有一些需要注意的地方。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- filename: arg_for_tree_points.lua</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"... content:"</span>, ...)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"... type:"</span>, <span class="built_in">type</span>(...))</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">show_args</span><span class="params">(t)</span></span></span><br><span class="line">    <span class="keyword">for</span> i,_s <span class="keyword">in</span> <span class="built_in">ipairs</span>(t) <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"["</span>,i,<span class="string">"]:"</span>,<span class="built_in">string</span>.<span class="built_in">byte</span>(_s,<span class="number">1</span>,#_s))</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">show_args(&#123;...&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  lua-learning git:(master) lua ./arg_for_tree_points.lua a b c          </span><br><span class="line">... content:abc</span><br><span class="line">... <span class="built_in">type</span>:string</span><br><span class="line">[1]:97</span><br><span class="line">[2]:98</span><br><span class="line">[3]:99</span><br></pre></td></tr></table></figure><p>上面的内容看起来还不错，不过它隐藏了一个bug，当不传入参数的时候，就会保错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  lua-learning git:(master) lua ./arg_for_tree_points.lua</span><br><span class="line">... content:</span><br><span class="line">lua: ./arg_for_tree_points.lua:3: bad argument <span class="comment">#1 to 'type' (value expected)</span></span><br><span class="line">stack traceback:</span><br><span class="line">[C]: <span class="keyword">in</span> <span class="keyword">function</span> <span class="string">'type'</span></span><br><span class="line">./arg_for_tree_points.lua:3: <span class="keyword">in</span> main chunk</span><br><span class="line">[C]: <span class="keyword">in</span> ?</span><br></pre></td></tr></table></figure><p>这是因为我们没有传入参数，那么程序里的三个点根本没有被使用，错误是由lua虚拟机基础C代码报出来的，所以尽量使用arg作为脚本参数解析原料。</p><h2 id="先与脚本文件的运行技巧"><a href="#先与脚本文件的运行技巧" class="headerlink" title="先与脚本文件的运行技巧"></a>先与脚本文件的运行技巧</h2><p>有时候，我们想要在运行脚本前运行一些其它前置条件或者陪置内容，lua中提供了一些方法可以尝试，这里列出两种：</p><p>第一种：<br>使用命令行传递lua代码</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- filename: which_first.lua</span></span><br><span class="line"><span class="built_in">print</span>(Iam)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  lua-learning git:(master) lua -e <span class="string">"Iam=100"</span> ./which_first.lua</span><br><span class="line">100</span><br></pre></td></tr></table></figure><p>第二种：<br>使用环境变量LUA_INIT做preload定制</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- filename: test_preload.lua</span></span><br><span class="line"><span class="built_in">print</span>(preload_var)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  lua-learning git:(master) (<span class="built_in">export</span> LUA_INIT=<span class="string">"preload_var = 'so....easy'"</span>; lua test_preload.lua)</span><br><span class="line">so....easy</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  lua-learning git:(master) (<span class="built_in">export</span> LUA_INIT=<span class="string">"@/home/rex/mz/mz-lua/self/lua-learning/preload_from_LUA_INIT.lua"</span>;lua test_preload.lua)</span><br><span class="line">so....easy</span><br></pre></td></tr></table></figure><h2 id="lua中的真与假"><a href="#lua中的真与假" class="headerlink" title="lua中的真与假"></a>lua中的真与假</h2><p>在lua中，空字符串和数字0都表示真，这和其它语言不同语言注意。</p><p>那么在lua中，只有 false和nil被视为假，其它的内容都是真～</p><p>所以，在lua判断中，最好显示的比较内容，不要取巧。</p><h2 id="在模式中的引号"><a href="#在模式中的引号" class="headerlink" title="在模式中的引号"></a>在模式中的引号</h2><p>lua没有字符串和字符的区别，当然如果你深入后，可以自己实现。<br>不过通常来说最好按照统一的风格来书写代码。</p><p>这里强调在模式中，一般引号并不是使用％来转义，而是使用标准的lua程序的\来转义。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; string.match(<span class="string">"sss\"mmmm"</span>, <span class="string">"^[^h].-\"%a*$"</span>)</span><br><span class="line">sss<span class="string">"mmmm</span></span><br></pre></td></tr></table></figure><h2 id="在lua中的数组索引"><a href="#在lua中的数组索引" class="headerlink" title="在lua中的数组索引"></a>在lua中的数组索引</h2><p>lua中数组索引从1开始，这已经是惯例，不过如果你想要从0开始构造一个table也是可以的，如：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; t = &#123; [<span class="number">0</span>] = <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>&#125;</span><br><span class="line">&gt; t</span><br><span class="line"></span><br><span class="line">&gt; #t</span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line">&gt; t = &#123; <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>&#125;</span><br><span class="line">&gt; #<span class="number">3</span></span><br><span class="line"></span><br><span class="line">&gt; #t</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>从0开始是可以，但如果这样你就没有办法享受lua提供的各种内置功能，比如这里的数组长度，为2而不是3.</p><h2 id="lua-中的变量的作用域，生命周期，存储空间"><a href="#lua-中的变量的作用域，生命周期，存储空间" class="headerlink" title="lua 中的变量的作用域，生命周期，存储空间"></a>lua 中的变量的作用域，生命周期，存储空间</h2><p>这里先分析作用域，后虚内容再补上。<br>通过例子来看应该是最好的，那么接下来看看lua怎么使用变量的</p><p>变量的遮蔽</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- filename: block.lua</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">"global a"</span></span><br><span class="line"><span class="keyword">local</span> a = <span class="string">"local a"</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  lua-learning git:(master) lua ./block.lua</span><br><span class="line"><span class="built_in">local</span> a</span><br></pre></td></tr></table></figure><p>这里如果要使用全局变量a，只能在使用前保存，后续再恢复。</p><p>lua对于代码快的界定和其它语言差不多，如：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- filename: block.lua</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">"global a"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">local</span> a = <span class="string">"in do"</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sample</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> a = <span class="string">"sample"</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">sample()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">out</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> out_a = <span class="string">"out_a"</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_out</span><span class="params">()</span></span></span><br><span class="line">        <span class="keyword">local</span> out_a = <span class="string">"_out_a"</span></span><br><span class="line">        <span class="built_in">print</span>(out_a)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="literal">true</span> <span class="keyword">then</span></span><br><span class="line">            out_a = <span class="string">"in if"</span></span><br><span class="line">            <span class="built_in">print</span>(out_a)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="built_in">print</span>(out_a)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    _out()</span><br><span class="line">    <span class="built_in">print</span>(out_a)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">out()</span><br><span class="line"></span><br><span class="line">x = <span class="number">10</span></span><br><span class="line"><span class="keyword">local</span> i = <span class="number">8</span></span><br><span class="line"><span class="keyword">while</span> i &lt; x <span class="keyword">do</span> - 这里的x是global的，而不是里面的<span class="keyword">local</span>，被记住了</span><br><span class="line">    <span class="keyword">local</span> x = <span class="number">11</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">a = &#123; <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span> &#125;</span><br><span class="line"><span class="keyword">local</span> i = <span class="number">2</span></span><br><span class="line"><span class="keyword">while</span> a[i] <span class="keyword">do</span> <span class="comment">-- 注意这里的索引跟着变化了</span></span><br><span class="line">    <span class="built_in">print</span>(a[i])</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> c = <span class="number">100</span></span><br><span class="line"><span class="keyword">repeat</span></span><br><span class="line">    c = <span class="number">1000</span></span><br><span class="line">    <span class="keyword">local</span> m = <span class="number">999</span></span><br><span class="line"><span class="keyword">until</span> m &lt; c <span class="comment">-- 这里的m可以使用</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> m &lt; <span class="number">10</span> <span class="keyword">do</span> <span class="comment">-- 这里的m不能用</span></span><br><span class="line">    <span class="keyword">local</span> m = <span class="number">9</span></span><br><span class="line">    m = m + <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(m)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  lua-learning git:(master) lua ./block.lua</span><br><span class="line"><span class="keyword">in</span> <span class="keyword">do</span></span><br><span class="line">global a</span><br><span class="line">sample</span><br><span class="line">global a</span><br><span class="line">_out_a</span><br><span class="line"><span class="keyword">in</span> <span class="keyword">if</span></span><br><span class="line"><span class="keyword">in</span> <span class="keyword">if</span></span><br><span class="line">out_a</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">20</span><br><span class="line">30</span><br><span class="line">1000</span><br><span class="line">lua: ./block.lua:58: attempt to compare nil with number</span><br><span class="line">stack traceback:</span><br><span class="line">./block.lua:58: <span class="keyword">in</span> main chunk</span><br><span class="line">[C]: <span class="keyword">in</span> ?</span><br></pre></td></tr></table></figure><h2 id="Lua中的break和retuen语句"><a href="#Lua中的break和retuen语句" class="headerlink" title="Lua中的break和retuen语句"></a>Lua中的break和retuen语句</h2><p>由于语法构造的原因，在lua中break与return必须是程序块的最后一条语句；<br>当我们需要在程序中间return或者break的时候，可以使用下面的技巧：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> <span class="params">()</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="comment">-- fail</span></span><br><span class="line">  <span class="keyword">do</span> <span class="keyword">return</span> <span class="keyword">end</span> <span class="comment">-- nice</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="Lua中的形参作用域"><a href="#Lua中的形参作用域" class="headerlink" title="Lua中的形参作用域"></a>Lua中的形参作用域</h2><p>在lua中，形参的作用域和其它语言一样，被限定为本地作用域。<br>只所以强调这个，也是为了对前文的变量作用域一个补充。</p><h2 id="形参与实参的对应关系"><a href="#形参与实参的对应关系" class="headerlink" title="形参与实参的对应关系"></a>形参与实参的对应关系</h2><p>实参和形参的对应关系如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">(a, b)</span></span> <span class="keyword">return</span> a <span class="keyword">or</span> b <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">f(<span class="number">3</span>) <span class="comment">-- a = 3, b = nil</span></span><br><span class="line">f(<span class="number">4</span>,<span class="number">5</span>) <span class="comment">-- a = 4, b = 5</span></span><br><span class="line">f(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>) <span class="comment">-- a = 3, b = 4, 5 被丢弃</span></span><br></pre></td></tr></table></figure><h2 id="函数的多重返回值"><a href="#函数的多重返回值" class="headerlink" title="函数的多重返回值"></a>函数的多重返回值</h2><p>在lua中，函数可以返回多个值，它的描述应该是这样的：</p><ol><li><p>如果只是作为独立的表达式调用，那么所有返回值被丢弃</p><p> string.find(“hello”, “he”)</p></li><li><p>如果函数调用作为表达式的一部分，并且不是表达式需要的最后一个参数的时候，只返回第一个值，其它的值被丢弃</p><p> print(“test”,string.find(“hello”, “h”),100)</p></li><li><p>如果函数调用作为表达式的一部分，并且是表达式需要的最后一个，或者唯一一个参数的时候，它将返回所有的返回值</p><p> print(string.find(“hello”, ‘h’))</p></li></ol><p>函数和变量是第一元素，可以看成是同等级别，函数的返回值也和变量一样，也有多值分配功能：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">start, <span class="keyword">end</span> = <span class="built_in">string</span>.<span class="built_in">find</span>(<span class="string">"hello"</span>, <span class="string">'h'</span>)</span><br><span class="line">start = <span class="built_in">string</span>.<span class="built_in">find</span>(<span class="string">"hello"</span>, <span class="string">'h'</span>)</span><br><span class="line">start, <span class="keyword">end</span>, nothing = <span class="built_in">string</span>.<span class="built_in">find</span>(<span class="string">"hello"</span>, <span class="string">'h'</span>), <span class="string">"this is nothing"</span></span><br><span class="line">t = &#123; <span class="built_in">string</span>.<span class="built_in">find</span>(<span class="string">'hello'</span>, <span class="string">'h'</span>) &#125;</span><br><span class="line">t = &#123; <span class="number">100</span>, <span class="built_in">string</span>.<span class="built_in">find</span>(<span class="string">'hello'</span>, <span class="string">'h'</span>), <span class="number">200</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="Lua中函数的重载？"><a href="#Lua中函数的重载？" class="headerlink" title="Lua中函数的重载？"></a>Lua中函数的重载？</h2><p>在lua或者python这类语言中，没有函数重载的功能，但有了可变参数。</p><p>如果复写了函数会怎么样呢？我们看看：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- filename: override.lua</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span> <span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello 1"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span> <span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello 2"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(hello())</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span> <span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello 3"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(hello())</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span> <span class="params">()</span></span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello 4"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">print</span>(hello())</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(hello())</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  lua-learning git:(master) lua ./override.lua</span><br><span class="line">hello 2</span><br><span class="line">hello 3</span><br><span class="line">hello 4</span><br><span class="line">hello 3</span><br></pre></td></tr></table></figure><h2 id="Lua中的可变形参，三个点的使用"><a href="#Lua中的可变形参，三个点的使用" class="headerlink" title="Lua中的可变形参，三个点的使用"></a>Lua中的可变形参，三个点的使用</h2><p>在lua中支可变参数，使用方法和C语言一致，不过需要注意的是：</p><ol><li>三个点是一个表达式，并且表示的是一个string类型变量</li><li>使用type时，如果没有参数给它，便会保错</li><li>支持string类型的所有操作</li></ol><p>来个例子：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- filename: var.lua</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">(...)</span></span></span><br><span class="line">    <span class="keyword">return</span> ...</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>( test(<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>) )</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  lua-learning git:(master) lua ./var.lua </span><br><span class="line">192021</span><br></pre></td></tr></table></figure><p>一般三个点符号可以配合table的构造式一起使用：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t = &#123;...&#125;</span><br></pre></td></tr></table></figure><p>在变长参数中可能会包含很多的值是nil的情况，这时候，需要使用内置的select函数来完成任务，过滤掉不要的nil参数</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- filename: var2.lua</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">how_to_use_select</span><span class="params">(...)</span></span></span><br><span class="line">    <span class="keyword">for</span> i=<span class="number">1</span>, <span class="built_in">select</span>(<span class="string">'#'</span>,...) <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> a = <span class="built_in">select</span>(i, ...)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'pop one: '</span>,a)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">select</span>(i,...))</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">how_to_use_select(<span class="string">'a'</span>,<span class="string">'b'</span>, <span class="number">100</span>, <span class="literal">nil</span>, <span class="string">'m'</span>, <span class="literal">nil</span>, <span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">how_to_use_select2</span><span class="params">(...)</span></span></span><br><span class="line">    <span class="keyword">local</span> tt = &#123;<span class="built_in">select</span>(<span class="number">1</span>, ...)&#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(tt))</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(tt) <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">print</span>(k,v)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"@@ next test:"</span>)</span><br><span class="line">how_to_use_select2(<span class="string">'a'</span>,<span class="string">'b'</span>, <span class="number">100</span>, <span class="literal">nil</span>, <span class="string">'m'</span>, <span class="literal">nil</span>, <span class="string">'hello'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  lua-learning git:(master) lua ./var2.lua</span><br><span class="line">pop one: a</span><br><span class="line">ab100nilmnilhello</span><br><span class="line">pop one: b</span><br><span class="line">b100nilmnilhello</span><br><span class="line">pop one: 100</span><br><span class="line">100nilmnilhello</span><br><span class="line">pop one: nil</span><br><span class="line">nilmnilhello</span><br><span class="line">pop one: m</span><br><span class="line">mnilhello</span><br><span class="line">pop one: nil</span><br><span class="line">nilhello</span><br><span class="line">pop one: hello</span><br><span class="line">hello</span><br><span class="line">@@ next <span class="built_in">test</span>:</span><br><span class="line">table</span><br><span class="line">1a</span><br><span class="line">2b</span><br><span class="line">3100</span><br><span class="line">5m</span><br><span class="line">7hello</span><br></pre></td></tr></table></figure><p>分析：</p><ol><li>select能够过滤掉nil类型的名字</li><li>select 能够根据传入不同的参数，给出不同的动作</li><li>上面的例子中，select(i,…)是返回从i开始到最后的所有参数，不过通过函数返回赋值操作，只有第一个被用了，其它的被扔掉</li><li>传入 -1 时，从后向前排列参数</li></ol><h2 id="Lua中的命名参数"><a href="#Lua中的命名参数" class="headerlink" title="Lua中的命名参数"></a>Lua中的命名参数</h2><p>在lua中，没有像python一样的命名参数机制，不过，可以变换一种方法，也可以达到一样的效果，如：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">windows</span><span class="params">(t)</span></span></span><br><span class="line"><span class="keyword">if</span> t.name == <span class="string">'tony'</span> <span class="keyword">then</span> <span class="built_in">print</span>(<span class="string">'tony trap'</span>) <span class="keyword">end</span></span><br><span class="line"><span class="keyword">if</span> t.hello == <span class="string">'world'</span> <span class="keyword">then</span> <span class="built_in">print</span>(<span class="string">'world trap'</span>) <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">windows &#123;hello = <span class="string">'world'</span>, name = <span class="string">'tony'</span>&#125; <span class="comment">-- 注意这里的写法：在lua中，如果函数的参数只有一个，调用的时候可以免去括号</span></span><br></pre></td></tr></table></figure><h2 id="Lua中的函数语法糖"><a href="#Lua中的函数语法糖" class="headerlink" title="Lua中的函数语法糖"></a>Lua中的函数语法糖</h2><p>在lua中，函数被设计成为第一类元素，和其它变量是等价的，这和python不同，而且函数可以存在任意位置，主要体现在匿名函数.<br>简单的转换如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> <span class="params">()</span></span> <span class="keyword">return</span> <span class="number">100</span> <span class="keyword">end</span></span><br><span class="line"><span class="comment">-- equal</span></span><br><span class="line">foo = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span> <span class="keyword">return</span> <span class="number">100</span> <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">demo</span> <span class="params">()</span></span> <span class="keyword">return</span> <span class="number">101</span> <span class="keyword">end</span></span><br><span class="line"><span class="comment">-- equal</span></span><br><span class="line"><span class="keyword">local</span> demo = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span> <span class="keyword">return</span> <span class="number">101</span> <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>由于这样的特性，lua既然可以在任意的地方使用，那么也可以在table中使用，这也是它最强大的地方之一，可以用这个特性来实现很多功能：<br>－－ 面向对象和模块编程</p><h2 id="什么叫‘词法域’？什么又是闭包？"><a href="#什么叫‘词法域’？什么又是闭包？" class="headerlink" title="什么叫‘词法域’？什么又是闭包？"></a>什么叫‘词法域’？什么又是闭包？</h2><p>如果将一个函数写在另一个函数中，那么这个内部函数可以访问外部函数的局部变量（当然也可以是全局变量，不过尽量不要使用），这项特性就叫‘词法域’，而这也是为闭包提供的理论基础。</p><p>简单实例：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- filename: closure.lua</span></span><br><span class="line"></span><br><span class="line">foo = <span class="string">"hello, tom"</span></span><br><span class="line">foo2= <span class="string">"hello, rex"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span> <span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> so = <span class="string">"easy"</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span></span></span><br><span class="line">        <span class="built_in">print</span>(so)</span><br><span class="line">        <span class="built_in">print</span>(foo)</span><br><span class="line">        <span class="built_in">print</span>(foo2)</span><br><span class="line">        foo = <span class="number">100</span></span><br><span class="line">        <span class="keyword">local</span> foo2 = <span class="number">100</span></span><br><span class="line">        <span class="built_in">print</span>(foo)</span><br><span class="line">        <span class="built_in">print</span>(foo2)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">demo()()</span><br><span class="line"><span class="built_in">print</span>(foo)</span><br><span class="line"><span class="built_in">print</span>(foo2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    dd = <span class="string">'hello dd'</span></span><br><span class="line">    hello = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span> <span class="built_in">print</span>(<span class="string">'hello func'</span>) <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(dd)</span><br><span class="line">hello()</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  lua-learning git:(master) lua ./closure.lua</span><br><span class="line">easy</span><br><span class="line">hello, tom</span><br><span class="line">hello, rex</span><br><span class="line">100</span><br><span class="line">100</span><br><span class="line">100</span><br><span class="line">hello, rex</span><br><span class="line">hello dd</span><br><span class="line">hello func</span><br></pre></td></tr></table></figure><p>函数是闭包closure的一个特例，在lua实现中，并没有使用function，而是使用closure来表示函数或者说闭包。</p><p>在前面的实例中有很多内容发人思考，这里再简单做下分析：</p><p>闭包是由一个函数和它所能访问的所有非局部变量组成的，这里的非局部变量在lua中叫做upvalue，这里也需要中点的说明下，<br>看个例子：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- filename: closure2.lua</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getID</span><span class="params">(index)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span></span></span><br><span class="line">        index = index + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> index</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">f = getID(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(f())</span><br><span class="line"><span class="built_in">print</span>(f())</span><br><span class="line"><span class="built_in">print</span>(f())</span><br><span class="line"></span><br><span class="line">f2 = getID(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(f2())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newCounter</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span></span></span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">c = newCounter()</span><br><span class="line"><span class="built_in">print</span>(c())</span><br><span class="line"><span class="built_in">print</span>(c())</span><br><span class="line"></span><br><span class="line">c2 = newCounter()</span><br><span class="line"><span class="built_in">print</span>(c2())</span><br></pre></td></tr></table></figure><p>在这个例子中，index不是内部函数的局部变量，也不是全局变量，在lua中它叫非全局变量，术语为upvalue，<br>虽然函数getID调用完成后，变量的作用域已经跳出来了，可是index仍然被存储保留着，这就是闭包的强大特性。<br>同样的，例子中local i也是这样的upvalue，和index是一样的作用，这个闭包closure特性是经过考验的编程技巧，所以lua也这样的设计它。</p><p>在lua程序设计中有一个例子很有意思，需要这里重点解释下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">- filename: closure3.lua</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    dd = <span class="string">"hello dd"</span></span><br><span class="line">    say = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span> <span class="built_in">print</span>(<span class="string">"good morning"</span>) <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(dd)</span><br><span class="line">say()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">oldSin = <span class="built_in">math</span>.<span class="built_in">sin</span></span><br><span class="line"><span class="built_in">math</span>.<span class="built_in">sin</span> = <span class="function"><span class="keyword">function</span> <span class="params">(x)</span></span></span><br><span class="line">    <span class="keyword">return</span> oldSin(x*<span class="built_in">math</span>.<span class="built_in">pi</span>/<span class="number">180</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">math</span>.<span class="built_in">sin</span>(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">math</span>.<span class="built_in">sin</span> = oldSin</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">local</span> oldSin = <span class="built_in">math</span>.<span class="built_in">sin</span></span><br><span class="line">    <span class="keyword">local</span> k =<span class="built_in">math</span>.<span class="built_in">pi</span>/<span class="number">180</span></span><br><span class="line">    <span class="built_in">math</span>.<span class="built_in">sin</span> = <span class="function"><span class="keyword">function</span> <span class="params">(x)</span></span></span><br><span class="line">        <span class="keyword">return</span> oldSin(x*k)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">math</span>.<span class="built_in">sin</span>(<span class="number">10</span>))</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  lua-learning git:(master) lua ./closure3.lua</span><br><span class="line">hello dd</span><br><span class="line">good morning</span><br><span class="line">0.17364817766693</span><br><span class="line">0.17364817766693</span><br></pre></td></tr></table></figure><p>例子中dd和say是属于do-end块的内容，但可以在文件全局范围内访问，如果不想在全局的块中访问，那么可以使用local限定。<br>第二个是使用do-end实现闭包的概念，完全的隔离旧版本的math.sin而使用封装过的函数，没有想到可以使用do-end配合函数使用closure！</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- filename: nonlocal_func2.lua</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> m = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> w = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">200</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>这也是一个闭包的例子，这个例子说明了下面的方式是可以正确使用的，</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> fucntion m () <span class="keyword">return</span> <span class="number">100</span> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">w</span> <span class="params">()</span></span> <span class="keyword">return</span> m() <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>关于局部函数的语法糖和正常函数是一样的。</p><h2 id="非全局函数"><a href="#非全局函数" class="headerlink" title="非全局函数"></a>非全局函数</h2><p>在lua中，非全局函数其实是函数作为第一元素的一个特殊作法，就是将函数放在table中，也正是因为它，lua有了强大的面向对象编程的能力。</p><p>先来看几个例子：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- filename: nonlocal_func.lua</span></span><br><span class="line">Lib = &#123;&#125;</span><br><span class="line">Lib.foo = <span class="function"><span class="keyword">function</span> <span class="params">(x,y)</span></span> <span class="keyword">return</span> x + y <span class="keyword">end</span></span><br><span class="line">Lib.goo = <span class="function"><span class="keyword">function</span> <span class="params">(x,y)</span></span> <span class="keyword">return</span> x - y <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Lib2 = &#123;</span><br><span class="line">    foo = <span class="function"><span class="keyword">function</span> <span class="params">(x,y)</span></span> <span class="keyword">return</span> x + y <span class="keyword">end</span>, <span class="comment">-- note!</span></span><br><span class="line">    goo = <span class="function"><span class="keyword">function</span> <span class="params">(x,y)</span></span> <span class="keyword">return</span> x - y <span class="keyword">end</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Lib3 = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Lib3.foo</span> <span class="params">(x,y)</span></span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Lib3.goo</span> <span class="params">(x,y)</span></span></span><br><span class="line">    <span class="keyword">return</span> x - y</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Lib.foo,Lib.goo)</span><br><span class="line"><span class="built_in">print</span>(Lib2.foo,Lib2.goo)</span><br><span class="line"><span class="built_in">print</span>(Lib3.foo,Lib3.goo)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  lua-learning git:(master) lua ./nonlocal_func.lua</span><br><span class="line"><span class="keyword">function</span>: 0x1428ef0<span class="keyword">function</span>: 0x14290a0</span><br><span class="line"><span class="keyword">function</span>: 0x1428fa0<span class="keyword">function</span>: 0x1428bc0</span><br><span class="line"><span class="keyword">function</span>: 0x1428c30<span class="keyword">function</span>: 0x1428c90</span><br></pre></td></tr></table></figure><p>这个例子主要说明的是非全局函数的定义方法。</p><p>非全局函数中的语法糖和正常的函数是差不多的，这里给出一些例子：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">demo</span> <span class="params">()</span></span> <span class="keyword">return</span> <span class="literal">nil</span> <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 等价于</span></span><br><span class="line"><span class="keyword">local</span> demo</span><br><span class="line">demo = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span> <span class="keyword">return</span> <span class="literal">nil</span> <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>关于函数的定义需要注意嵌套的情况：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> demo = <span class="function"><span class="keyword">function</span> <span class="params">(n)</span></span></span><br><span class="line">  <span class="keyword">if</span> n &lt; <span class="number">10</span> <span class="keyword">then</span></span><br><span class="line">    sum = sum <span class="keyword">or</span> <span class="number">0</span> + demo(n+<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>这种写法会保错，因为在递归的时候demo还没有定义完全，补救的方法有：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> demo</span><br><span class="line">demo = <span class="function"><span class="keyword">function</span> <span class="params">(n)</span></span></span><br><span class="line">  <span class="keyword">if</span> n &lt; <span class="number">10</span> <span class="keyword">then</span></span><br><span class="line">    sum = sum <span class="keyword">or</span> <span class="number">0</span> + demo(n+<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>或者直接用语法糖的方式, 这和前面的等价：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">demo</span> <span class="params">(n)</span></span></span><br><span class="line">  <span class="keyword">if</span> n &lt; <span class="number">10</span> <span class="keyword">then</span></span><br><span class="line">    sum = sum <span class="keyword">or</span> <span class="number">0</span> + demo(n+<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>不过这种方法在间接递归调用就不好使了，那就需要提前声明如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">local f, w</span><br><span class="line">function f () return w() end</span><br><span class="line">function w () return f() end</span><br></pre></td></tr></table></figure><p>还有一点需要特别注意，就是，如果使用local这样的关键字修饰function的标签，那么在定义的时候就不要在函数的前面填加local！<br>下面的例子是错误的：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> f</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> g = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span></span><br><span class="line">  <span class="keyword">return</span> f()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span> <span class="params">()</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>如果这样的话，会新建一个内部的函数f，而之前在函数g中使用的那个f已经变成了未定义的状态！！！</p><h2 id="Lua中的尾调用消除"><a href="#Lua中的尾调用消除" class="headerlink" title="Lua中的尾调用消除"></a>Lua中的尾调用消除</h2><p>什么样的函数是尾调用？</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span> <span class="params">(x)</span></span> g(x) <span class="keyword">end</span> <span class="comment">-- No</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span> <span class="params">(x)</span></span> <span class="keyword">return</span> g(x) <span class="keyword">end</span> <span class="comment">-- Yes</span></span><br></pre></td></tr></table></figure><p>必须符合这样的形式：return func(&lt; args &gt;)</p><p>lua实现的尾调用是利用类似goto的原理，完成stack（栈）的零消耗。</p><p>还有什么样的是非尾调用？</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> g(x) + <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> x <span class="keyword">or</span> g(x)</span><br><span class="line"><span class="keyword">return</span> (g(x))</span><br><span class="line"><span class="comment">-- etc ...</span></span><br></pre></td></tr></table></figure><h2 id="Lua中的协同程序"><a href="#Lua中的协同程序" class="headerlink" title="Lua中的协同程序"></a>Lua中的协同程序</h2><p>下面是一个协同程序实现的管道：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- filename: coroutine.lua</span></span><br><span class="line">productor = coroutine.<span class="built_in">create</span>( <span class="function"><span class="keyword">function</span> <span class="params">()</span></span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">        line = <span class="built_in">io</span>.<span class="built_in">read</span>()</span><br><span class="line">        send(line)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">consumer</span> <span class="params">(prod)</span></span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">        line = receive(prod)</span><br><span class="line">        <span class="built_in">io</span>.<span class="built_in">write</span>(line, <span class="string">'\n'</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">send</span> <span class="params">(content)</span></span></span><br><span class="line">    coroutine.<span class="built_in">yield</span>(content)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">receive</span> <span class="params">(prod)</span></span></span><br><span class="line">    <span class="built_in">status</span>, content = coroutine.<span class="built_in">resume</span>(prod)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">consumer(productor)</span><br></pre></td></tr></table></figure><p>利用协同程序实现过滤器</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- filename: filter.lua</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">consumer</span> <span class="params">(filter)</span></span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> line = receive(filter)</span><br><span class="line">        <span class="built_in">io</span>.<span class="built_in">write</span>(line, <span class="string">'\n'</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span> <span class="params">(prod)</span></span></span><br><span class="line">    <span class="keyword">return</span> coroutine.<span class="built_in">create</span>( <span class="function"><span class="keyword">function</span> <span class="params">()</span></span></span><br><span class="line">        <span class="keyword">for</span> _i=<span class="number">1</span>, <span class="built_in">math</span>.<span class="built_in">huge</span> <span class="keyword">do</span></span><br><span class="line">            <span class="keyword">local</span> _line = receive(prod)</span><br><span class="line">            <span class="keyword">local</span> line = <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"%4d: %s"</span>, _i, _line )</span><br><span class="line">            send(line)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">receive</span> <span class="params">(prod)</span></span></span><br><span class="line">    <span class="keyword">local</span> <span class="built_in">status</span>, content = coroutine.<span class="built_in">resume</span>(prod)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">send</span> <span class="params">(content)</span></span></span><br><span class="line">    coroutine.<span class="built_in">yield</span>(content)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">productor = coroutine.<span class="built_in">create</span>( <span class="function"><span class="keyword">function</span> <span class="params">()</span></span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> line = <span class="built_in">io</span>.<span class="built_in">read</span>()</span><br><span class="line">        send(line)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">consumer(filter(productor))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Shell</title>
      <link href="/2019/06/25/VimNote/backup/shell/"/>
      <url>/2019/06/25/VimNote/backup/shell/</url>
      
        <content type="html"><![CDATA[<h2 id="哪里有在线的免费shell书籍可以查看？"><a href="#哪里有在线的免费shell书籍可以查看？" class="headerlink" title="哪里有在线的免费shell书籍可以查看？"></a>哪里有在线的免费shell书籍可以查看？</h2><p>开源shell书籍，你值得拥有！</p><p><a href="http://tinylab.org/open-shell-book/" target="_blank" rel="noopener">官网地址</a></p><p><a href="https://tinylab.gitbooks.io/shellbook/" target="_blank" rel="noopener">在线阅读</a></p><h2 id="如何查看shell的命令类型？"><a href="#如何查看shell的命令类型？" class="headerlink" title="如何查看shell的命令类型？"></a>如何查看shell的命令类型？</h2><p>可以使用shell内置的命令type完成类型的打印反馈。</p><h2 id="查看shell中某个命令类型的时候，返回-xx-is-hashed是什么意思？"><a href="#查看shell中某个命令类型的时候，返回-xx-is-hashed是什么意思？" class="headerlink" title="查看shell中某个命令类型的时候，返回 xx is hashed是什么意思？"></a>查看shell中某个命令类型的时候，返回 xx is hashed是什么意思？</h2><p>一般这类命令肯定不是内置命令，并且可以在PATH路径中索引到，之所以显示hashed是因为当你运行一遍该命令后，它会被缓存在内存的hash表中。</p><h2 id="shell中的help命令用来干什么？"><a href="#shell中的help命令用来干什么？" class="headerlink" title="shell中的help命令用来干什么？"></a>shell中的help命令用来干什么？</h2><p>help命令用来显示shell内置命令的帮助文档，如果是外置命令一般会有它自己的帮助文档，不过打开方式是man命令。</p><h2 id="shell中如何进行数字的比较？"><a href="#shell中如何进行数字的比较？" class="headerlink" title="shell中如何进行数字的比较？"></a>shell中如何进行数字的比较？</h2><p>shell中这点比较反人类，比较数字的时候并不使用大于和小于号，”&lt;” “&gt;” “==” “!=”，而是使用下面的特殊组合表示：</p><pre><code>A -lt B # A &lt; BA -gt B # A &gt; BA -eq B # A == BA -nq B # A != B</code></pre><h2 id="shell中-和test命令的区别？"><a href="#shell中-和test命令的区别？" class="headerlink" title="shell中 [ ] 和test命令的区别？"></a>shell中 [ ] 和test命令的区别？</h2><p>其实没有区别，可以理解为[ ]是test的简写，不过要注意[ ]前后的空格，如果你理解它是一个命令，那就好解释了，毕竟命令和参数之间需要空格隔开的。</p><h2 id="shell中是否可以使用分号？"><a href="#shell中是否可以使用分号？" class="headerlink" title="shell中是否可以使用分号？"></a>shell中是否可以使用分号？</h2><p>当然可以，而且可以使用分号区分指令，如：</p><pre><code>cd $HOME; ls -al</code></pre><h2 id="执行shell命令时使用bash，source，-都可以，那么它们的区别是什么？"><a href="#执行shell命令时使用bash，source，-都可以，那么它们的区别是什么？" class="headerlink" title="执行shell命令时使用bash，source，. 都可以，那么它们的区别是什么？"></a>执行shell命令时使用bash，source，. 都可以，那么它们的区别是什么？</h2><h2 id="shell中的time命令是用来干什么的？"><a href="#shell中的time命令是用来干什么的？" class="headerlink" title="shell中的time命令是用来干什么的？"></a>shell中的time命令是用来干什么的？</h2><p>它并不是用来显示当前时间的，显示当前时间是date，而显示某条指令运行的时间统计是time。</p><h2 id="如何使用shell完成数字的进制转换？"><a href="#如何使用shell完成数字的进制转换？" class="headerlink" title="如何使用shell完成数字的进制转换？"></a>如何使用shell完成数字的进制转换？</h2><p>shell内置方法就不推荐了，可以使用套件中的默认安装工具bc完成该操作，并且很灵活，如：</p><pre><code>echo &quot;obase=10;ibase=8;11&quot; | bc -l</code></pre><p>进制的替换可以按照你的个人需求来。</p><h2 id="如何在shell中显示字符的acsii码？"><a href="#如何在shell中显示字符的acsii码？" class="headerlink" title="如何在shell中显示字符的acsii码？"></a>如何在shell中显示字符的acsii码？</h2><p>通常情况下，使用man acsii命令可以查看acsii编码的规则，不过如果你不想计算，那可以使用下面的技巧，完成字符的转换显示：<br>例如，默认的分隔符 IFS 包括空格、 TAB 以及换行，可以用 man ascii 佐证</p><pre><code>$ echo -n &quot;$IFS&quot; | od -c0000000      t  n0000003$ echo -n &quot;$IFS&quot; | od -b0000000 040 011 0120000003</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Q&amp;A</title>
      <link href="/2019/06/23/VimNote/backup/hexo/"/>
      <url>/2019/06/23/VimNote/backup/hexo/</url>
      
        <content type="html"><![CDATA[<p>本文记录关于hexo使用中一些常见的问题。</p><h2 id="如何使用hexo配合github建立blog？"><a href="#如何使用hexo配合github建立blog？" class="headerlink" title="如何使用hexo配合github建立blog？"></a>如何使用hexo配合github建立blog？</h2><p>这个问题一般google或者baidu就可以简单的找到答案，这里推荐一片文章，<a href="https://zhuanlan.zhihu.com/p/60578464" target="_blank" rel="noopener">带你过去</a>。</p><h2 id="如何显示本地链接图片与网络链接图片？"><a href="#如何显示本地链接图片与网络链接图片？" class="headerlink" title="如何显示本地链接图片与网络链接图片？"></a>如何显示本地链接图片与网络链接图片？</h2><p>首先需要确认你所使用的hexo版本</p><pre><code>hexo -v</code></pre><p>截止到本文，hexo应该有3.0+ 的版本，所以后续都以该版本说明问题。</p><h3 id="网络图片链接"><a href="#网络图片链接" class="headerlink" title="网络图片链接"></a>网络图片链接</h3><p>文章中引用网络链接图片很简单，而且一般也不会有太大的问题，格式为:</p><p>模板：</p><pre><code>![picture text](URL &quot;tag names&quot;)</code></pre><p>例子：</p><pre><code>![picture text](https://cn.bing.com/images/search?view=detailV2&amp;ccid=2wrCKDWu&amp;id=CC79FDA16B5CC6C52F5C1D864D0E69419F976EC8&amp;thid=OIP.2wrCKDWuP8_1Xk5Ao_uQZQHaE7&amp;mediaurl=https%3a%2f%2fwww.fjordtravel.no%2fwp-content%2fuploads%2f2013%2f10%2f002588_Roger-Johansen_www.nordnorge.com_Bodoe-1024x682.jpg&amp;exph=682&amp;expw=1024&amp;q=picture&amp;simid=608008046234307249&amp;selectedIndex=1&amp;qpvt=picture&amp;ajaxhist=0 &quot;picture tag&quot;)</code></pre><h3 id="本地图片链接"><a href="#本地图片链接" class="headerlink" title="本地图片链接"></a>本地图片链接</h3><p>由于hexo不同版本加上不同版本的插件兼容性，可能导致本地图片链接有一些问题。</p><p>这里我们只介绍3.0 以后版本的使用，首先推荐官方使用的方法：</p><p><a href="https://hexo.io/zh-cn/docs/asset-folders.html" target="_blank" rel="noopener">hexo官方使用方法传送门</a></p><p>如果你还是像要按照markdown语法完成编写本地图片链接，那么请参考这片文章：</p><p><a href="https://www.xilixili.net/2019/03/26/hexo-markdown-use-images/" target="_blank" rel="noopener">比较清晰的讲述本地图片链接问题的blog</a></p><p>这里为了保证后续能够顺利使用，做一些简单的引用：</p><p>hexo-asset-image 这个插件是实现markdown语法显示本地图片链接，那么直接通过NPM安装这个插件，<br>总结一下，首先启用资源拷贝功能，在 _config.yml 中，修改</p><pre><code>post_asset_folder: true</code></pre><p>然后在使用的时候，首先需要通过 <em>hexo n xxx</em> 创建新博客的时候，会创建同名 xxx 的目录，<br>相关的资源文件放里面即可，当然这个目录也可以手动创建，最终大概目录结构如下</p><pre><code>./test.md./test/./test/bg.png</code></pre><p>在博客中引用的时候，就按正常的引用方式引用即可，如</p><pre><code>![](test/bg.png)</code></pre><p>但是直接这么实现，我发现并没有成功，然后参考<a href="https://www.jianshu.com/p/3db6a61d3782" target="_blank" rel="noopener">这篇文章</a></p><p>原来是兼容性问题，卸载刚安装的插件，安装参考中作者的修改版本</p><pre><code>npm uninstall hexo-asset-imagenpm install https://github.com/7ym0n/hexo-asset-image --savehexo clean &amp;&amp; hexo g</code></pre><p>到这里基本OK了，然后F12查看了地址，虽然可以访问了，但是地址却是带域名方式的，<br>通用性不好，查看了作者的实现逻辑，确认是字符串切割问题，然后在 _config.yml 中,<br>修改网站地址从 <em><a href="https://xilixili.net" target="_blank" rel="noopener">https://xilixili.net</a></em> 修改为 <em>xilixili.net</em>， 不带 http(s) 头，重新生成就好了。</p><p>小结：</p><ol><li>可以严格按照官方的推荐方式书写本地图片链接</li><li>可以借助插件实现markdown相似图片链接的写法，不过需要外置插件安装</li><li>填加插件后，为了保持格式同步，请修改 <em>_config.yml</em> 文件中的url选项</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS opengrok</title>
      <link href="/2019/02/23/VimNote/backup/opengrok/"/>
      <url>/2019/02/23/VimNote/backup/opengrok/</url>
      
        <content type="html"><![CDATA[<h2 id="Install-OpenJDK"><a href="#Install-OpenJDK" class="headerlink" title="Install OpenJDK"></a>Install OpenJDK</h2><p>install by yum</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install java-1.8.0-openjdk java-1.8.0-openjdk-devel</span><br></pre></td></tr></table></figure><p>location:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirname $(readlink $(readlink $(<span class="built_in">which</span> java)))</span><br></pre></td></tr></table></figure><h2 id="Install-OpenGrok-docker"><a href="#Install-OpenGrok-docker" class="headerlink" title="Install OpenGrok docker"></a>Install OpenGrok docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull krazakee/opengrok <span class="comment">#pull a opengrok-repo</span></span><br></pre></td></tr></table></figure><h2 id="Privatize-the-JDK-To-the-User-Directory"><a href="#Privatize-the-JDK-To-the-User-Directory" class="headerlink" title="Privatize the JDK To the User Directory"></a>Privatize the JDK To the User Directory</h2><p>NOTE: please copy all files to path you want, not Link files<br>so you should do this with ‘-L’ option:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash cp -arL `dirname $(readlink $(readlink $(<span class="built_in">which</span> java)))` /path/to/jvm</span><br></pre></td></tr></table></figure><h2 id="Make-Script"><a href="#Make-Script" class="headerlink" title="Make Script"></a>Make Script</h2><p>run docker daemon for opengrok</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d --name openg \</span><br><span class="line">            -p 8111:8080 \</span><br><span class="line">            -v /path/to/jvm:/usr/lib/jvm \</span><br><span class="line">            -v /path/to/opengrok/data:/var/opengrok:delegated \</span><br><span class="line">            -w /app krazakee/opengrok</span><br></pre></td></tr></table></figure><p>update index DB-data</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> openg bash -c <span class="string">"/reindex.sh"</span></span><br></pre></td></tr></table></figure><p>NOTE: your source code should be put to /path/to/opengrok/data/src/</p><p>for example: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/opengrok/data/src/flask</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/pallets/flask.git</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> openg bash -c <span class="string">"/reindex.sh"</span></span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/32568717" target="_blank" rel="noopener">Good Blog form zhihu</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CentOS Git</title>
      <link href="/2019/02/22/VimNote/backup/git/"/>
      <url>/2019/02/22/VimNote/backup/git/</url>
      
        <content type="html"><![CDATA[<h2 id="How-to-Install-The-Latest-Version"><a href="#How-to-Install-The-Latest-Version" class="headerlink" title="How-to Install The Latest Version"></a>How-to Install The Latest Version</h2><p>If you want get the latest version of git tools on CentOS, the one method of all is compile with source code.<br><a href="https://github.com/git/git" target="_blank" rel="noopener">git repository</a></p><p>Here are steps of installing git tools.</p><h3 id="Install-Development-Groups-Tools"><a href="#Install-Development-Groups-Tools" class="headerlink" title="Install Development Groups Tools"></a>Install Development Groups Tools</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum groups list <span class="comment"># query</span></span><br><span class="line">sudo yum group install <span class="string">'Development and Creative Workstation'</span></span><br></pre></td></tr></table></figure><h3 id="Remove-Old-Version-Git-From-System"><a href="#Remove-Old-Version-Git-From-System" class="headerlink" title="Remove Old Version Git From System"></a>Remove Old Version Git From System</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove git</span><br></pre></td></tr></table></figure><h3 id="Maybe-Other-Dependence"><a href="#Maybe-Other-Dependence" class="headerlink" title="Maybe Other Dependence"></a>Maybe Other Dependence</h3><p>Maybe some other tools should be installed:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install  curl-devel \</span><br><span class="line">                  expat-devel \</span><br><span class="line">                  gettext-devel \</span><br><span class="line">                  openssl-devel \</span><br><span class="line">                  zlib-devel \</span><br><span class="line">                  gcc \</span><br><span class="line">                  perl-ExtUtils-MakeMaker \</span><br><span class="line">                  docbook2X.x86_64 \</span><br><span class="line">                  curl-devel \</span><br><span class="line">                  openssl-devel \</span><br><span class="line">                  asciidoc.noarch</span><br></pre></td></tr></table></figure><h3 id="Download-Source-Code"><a href="#Download-Source-Code" class="headerlink" title="Download Source Code"></a>Download Source Code</h3><p>download source code methods as below:</p><ol><li><p>clone source code from Github:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/git/git.git <span class="comment"># to current dir</span></span><br></pre></td></tr></table></figure></li><li><p>get source code zip-file from Github:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/git/git/archive/master.zip <span class="comment"># to current dir</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Compile-Source-Code-and-Install"><a href="#Compile-Source-Code-and-Install" class="headerlink" title="Compile Source Code and Install"></a>Compile Source Code and Install</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make prefix=/usr install install-doc install-html install-info ;<span class="comment"># as root</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/git/git/blob/master/INSTALL" target="_blank" rel="noopener">official installation documentation</a></p><h3 id="Verify"><a href="#Verify" class="headerlink" title="Verify"></a>Verify</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://www.cnblogs.com/hglibin/p/8627975.html" target="_blank" rel="noopener">blog about install git from source code </a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CentOS Chinese Inputmethod</title>
      <link href="/2019/02/18/VimNote/backup/tips/"/>
      <url>/2019/02/18/VimNote/backup/tips/</url>
      
        <content type="html"><![CDATA[<h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>日常技巧速记，以Q&amp;A形式发布。</p><h2 id="python-如何只检查语法而不执行具体的代码逻辑？"><a href="#python-如何只检查语法而不执行具体的代码逻辑？" class="headerlink" title="python 如何只检查语法而不执行具体的代码逻辑？"></a>python 如何只检查语法而不执行具体的代码逻辑？</h2><p>可以使用python的编译模块来达到检查语法的目的，使用如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python -m py_compile target.py</span><br></pre></td></tr></table></figure><h2 id="Linux如何查看磁盘空间？如何查看目录文件的总体占用大小？"><a href="#Linux如何查看磁盘空间？如何查看目录文件的总体占用大小？" class="headerlink" title="Linux如何查看磁盘空间？如何查看目录文件的总体占用大小？"></a>Linux如何查看磁盘空间？如何查看目录文件的总体占用大小？</h2><p>在Linux操作系统下有很多默认集成到套件中的命令可以帮助你完成这些事情，如：</p><p>查看整体磁盘的占用比例和使用情况可以使用df命令</p><pre><code>df -h</code></pre><p>查看个别目录的文件磁盘占用可以使用du命令来完成</p><pre><code>du -sh *</code></pre><p>具体使用细节请查看相应的帮助手册：man du/df</p><h2 id="Awesome锁屏配置"><a href="#Awesome锁屏配置" class="headerlink" title="Awesome锁屏配置"></a>Awesome锁屏配置</h2><p><strong>锁屏</strong>功能在工作环境下比较常用。</p><p>推荐一个比较<a href="http://www.chengweiyang.cn/2016/02/16/how-to-lock-screen-in-awesome-wm/" target="_blank" rel="noopener">不错的配置教程</a></p><h2 id="FireFox-Flash-Plugin-on-Ubuntu"><a href="#FireFox-Flash-Plugin-on-Ubuntu" class="headerlink" title="FireFox Flash Plugin on [Ubuntu]"></a>FireFox Flash Plugin on [Ubuntu]</h2><p>On ubuntu (version == 18.04), we had test and follow us:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install flashplugin-installer</span><br></pre></td></tr></table></figure><blockquote><ul><li><a href="https://linuxconfig.org/how-to-install-adobe-flash-player-plugin-for-firefox-on-centos-7-linux" target="_blank" rel="noopener">How to install firefox flash plugin</a></li></ul></blockquote><h2 id="Configuration-Of-Bash"><a href="#Configuration-Of-Bash" class="headerlink" title="Configuration Of Bash"></a>Configuration Of Bash</h2><p><a href="https://github.com/junegunn/fzf" target="_blank" rel="noopener">https://github.com/junegunn/fzf</a><br><a href="https://www.peterdavehello.org/2013/12/bash-completion/" target="_blank" rel="noopener">https://www.peterdavehello.org/2013/12/bash-completion/</a><br><a href="https://github.com/donnemartin/gitsome" target="_blank" rel="noopener">https://github.com/donnemartin/gitsome</a></p><h2 id="Configuration-Of-Zsh"><a href="#Configuration-Of-Zsh" class="headerlink" title="Configuration Of Zsh"></a>Configuration Of Zsh</h2><p><a href="https://github.com/zsh-users/zsh" target="_blank" rel="noopener">https://github.com/zsh-users/zsh</a><br><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh</a><br><a href="https://github.com/zsh-users/zsh-completions" target="_blank" rel="noopener">https://github.com/zsh-users/zsh-completions</a><br><a href="https://github.com/junegunn/fzf" target="_blank" rel="noopener">https://github.com/junegunn/fzf</a><br><a href="https://github.com/makeitjoe/incr.zsh" target="_blank" rel="noopener">https://github.com/makeitjoe/incr.zsh</a><br><a href="http://yijiebuyi.com/blog/36955b84c57e338dd8255070b80829bf.html" target="_blank" rel="noopener">http://yijiebuyi.com/blog/36955b84c57e338dd8255070b80829bf.html</a><br><a href="http://mimosa-pudica.net/zsh-incremental.html" target="_blank" rel="noopener">http://mimosa-pudica.net/zsh-incremental.html</a><br><a href="https://github.com/changyuheng/fz" target="_blank" rel="noopener">https://github.com/changyuheng/fz</a><br><a href="https://github.com/donnemartin/gitsome" target="_blank" rel="noopener">https://github.com/donnemartin/gitsome</a></p><h2 id="minicom-usage"><a href="#minicom-usage" class="headerlink" title="minicom usage"></a>minicom usage</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># example</span></span><br><span class="line">sudo minicom -m -c on -C ./minicom_scp.txt -s</span><br></pre></td></tr></table></figure><h2 id="how-to-install-samba-in-CentOS"><a href="#how-to-install-samba-in-CentOS" class="headerlink" title="how to install samba in CentOS"></a>how to install samba in CentOS</h2><blockquote><ul><li><a href="https://www.cnblogs.com/cq146637/p/7806550.html" target="_blank" rel="noopener">Install Samba</a></li></ul></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Multiple SSH KEYs on The Same Computer</title>
      <link href="/2019/02/11/VimNote/backup/ssh-key/"/>
      <url>/2019/02/11/VimNote/backup/ssh-key/</url>
      
        <content type="html"><![CDATA[<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>有时候，可能需要在github上创建不同的帐户（虽然是很小的概率），但如果你的主机上只有一个sshkey，就会出现问题。</p><p>问题在于这个github会查询sshkey的唯一性，并告诉你这个sshkey已经存在了。</p><p>这个时候同一台机器创建不同的sshkey就有必要了。</p><h2 id="具体操作步骤"><a href="#具体操作步骤" class="headerlink" title="具体操作步骤"></a>具体操作步骤</h2><p>任何的操作步骤都会有假设的前提。</p><p>我们假设现在你的主机还没有配置sshkey</p><h3 id="1-为本地主机创建多个sshkey"><a href="#1-为本地主机创建多个sshkey" class="headerlink" title="1. 为本地主机创建多个sshkey"></a>1. 为本地主机创建多个sshkey</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"youremail@temp.com"</span></span><br><span class="line"></span><br><span class="line">&gt; -t 为参数类型</span><br><span class="line">&gt; -C 关联邮件</span><br></pre></td></tr></table></figure><p>这个步骤中，会要求你配置文件的位置和名称，注意并正确填写。</p><p>对应标题，我们需要假设需要在本地创建两个sshkey达到目的，所以需要执行<strong>两次</strong>上述命令。</p><p>注意，执行上述命令的时候，配置的文件应该是不同的。</p><p>现在，已经有了两个不同的sshkey在~/.ssh/目录下。<br>查看目录结构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l ~/.ssh/</span><br></pre></td></tr></table></figure><h3 id="2-配置ssh的config文件，并关联不同帐户"><a href="#2-配置ssh的config文件，并关联不同帐户" class="headerlink" title="2. 配置ssh的config文件，并关联不同帐户"></a>2. 配置ssh的config文件，并关联不同帐户</h3><p>查看ssh的手册可以发现下面的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># man ssh &amp;&amp; grep configfile</span><br><span class="line"></span><br><span class="line">     -F configfile</span><br><span class="line">             Specifies an alternative per-user configuration file.  If a configuration file is given on the command line, the system-wide configuration file (&#x2F;etc&#x2F;ssh&#x2F;ssh_config) will</span><br><span class="line">             be ignored.  The default for the per-user configuration file is ~&#x2F;.ssh&#x2F;config.</span><br></pre></td></tr></table></figure><p>在~/.ssh/下创建config文件并添加配置信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch ~/.ssh/config</span><br></pre></td></tr></table></figure><p>使用编辑器完成配置信息添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi ~/.ssh/config</span><br></pre></td></tr></table></figure><p>配置信息样例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Host github.com # 这个名字理论上可以随便配置，但最好配置有意义的内容，并且可以看到这个内容是区分不同sshkey的必要条件</span><br><span class="line">    HostName github.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~&#x2F;.ssh&#x2F;id_rsa</span><br><span class="line"></span><br><span class="line">Host my.github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~&#x2F;.ssh&#x2F;my</span><br></pre></td></tr></table></figure><h3 id="3-上传指定的sshkey到github"><a href="#3-上传指定的sshkey到github" class="headerlink" title="3. 上传指定的sshkey到github"></a>3. 上传指定的sshkey到github</h3><p>上川sshkey到github也很容易，这个内容可以参考链接：<br><a href="https://blog.csdn.net/itmyhome1990/article/details/39668349" target="_blank" rel="noopener">GITHUB的SSHKEY的配置</a></p><h3 id="4-验证配置的内容是否生效"><a href="#4-验证配置的内容是否生效" class="headerlink" title="4. 验证配置的内容是否生效"></a>4. 验证配置的内容是否生效</h3><p>验证指令很简单：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@my.github.com</span><br><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果出现Hi xxx!You’ve successfully authenticated 就说明连接成功了。</p><h3 id="5-git仓库的配置"><a href="#5-git仓库的配置" class="headerlink" title="5. git仓库的配置"></a>5. git仓库的配置</h3><p>需要知道的是，本地关于ssh的相关操作，都是基于本地的配置完成的。这很重要！</p><p>这里需要注意的是，用户名和邮件的配置信息是需要使用git的指令完成配置的。<br>用户信息可以是本地仓库的，也可以是针对个别用户的，也可以是全局的。<br>具体的内容请参考：<a href="https://blog.csdn.net/joe_007/article/details/7276195" target="_blank" rel="noopener">git config 配置</a></p><p>如果想要免密操作，那么clone自己的仓库就使用git协议，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@my.github.com:username/wiki.websit.git</span><br></pre></td></tr></table></figure><p>如果仓库已经clone或者创建完成，那么可以修改本地的仓库完成配置，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#更改[remote "origin"]项中的url中的(.git/config)</span></span><br><span class="line"><span class="comment">#my.github.com 对应上面配置的host</span></span><br><span class="line">[remote <span class="string">"origin"</span>]</span><br><span class="line">url = git@my.github.com:itmyline/blog.git</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在Git Bash中提交的时候修改remote</span></span><br><span class="line">$ git remote rm origin</span><br><span class="line">$ git remote add origin git@my.github.com:username/blog.git</span><br></pre></td></tr></table></figure><h2 id="扩展内容"><a href="#扩展内容" class="headerlink" title="扩展内容"></a>扩展内容</h2><p>在使用hexo完成博客编写的时候，需要配置web中的 _config.yml文件的内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">deploy:</span><br><span class="line">  repo: git@cool.github.com:oamsocool&#x2F;oamsocool.github.io.git</span><br><span class="line">  type: git</span><br><span class="line">  branch: master</span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
